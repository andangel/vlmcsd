; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_01MCMALHOG@a?$AA@				; `string'
PUBLIC	??_C@_0O@LNENHMIM@?$CFY?9?$CFm?9?$CFd?5?$CFX?3?5?$AA@ ; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_0L@NFCOGLDB@Unlicensed?$AA@		; `string'
PUBLIC	??_C@_08BMJGAJHF@Licensed?$AA@			; `string'
PUBLIC	??_C@_09JBIIANMO@OOB?5grace?$AA@		; `string'
PUBLIC	??_C@_09CLFMDFGC@OOT?5grace?$AA@		; `string'
PUBLIC	??_C@_0M@MHDDAGNF@Non?9Genuine?$AA@		; `string'
PUBLIC	??_C@_0N@OFINCEFP@Notification?$AA@		; `string'
PUBLIC	??_C@_0P@NCPOCFCF@Extended?5grace?$AA@		; `string'
PUBLIC	??_C@_0BN@LENFACPA@?$CF08x?9?$CF04x?9?$CF04x?9?$CF04x?9?$CF012I64x?$AA@ ; `string'
PUBLIC	??_C@_0CJ@KEHOAAGG@Protocol?5version?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_03CCLAEDDF@Yes?$AA@			; `string'
PUBLIC	??_C@_02JINPPBEP@No?$AA@			; `string'
PUBLIC	??_C@_0CG@CIJPHHEF@Client?5is?5a?5virtual?5machine?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0CL@NILKFNNP@Licensing?5status?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0CO@GGDJLANK@Remaining?5time?5?$CI0?5?$DN?5forever?$CJ?5?5?5?5@ ; `string'
PUBLIC	??_C@_0CL@KHCLANPB@Application?5ID?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0CL@LLNJLCF@SKU?5ID?5?$CIaka?5Activation?5ID?$CJ?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0CL@MNFHGDHP@KMS?5ID?5?$CIaka?5KMS?5counted?5ID?$CJ?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0CG@NAJADCGN@Client?5machine?5ID?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0CG@KNAHJFGH@Previous?5client?5machine?5ID?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0M@EHAPGNAC@?$CFY?9?$CFm?9?$CFd?5?$CFX?$AA@ ; `string'
PUBLIC	??_C@_0CG@CCLOIHMC@Client?5request?5timestamp?5?$CIUTC?$CJ?5?5@ ; `string'
PUBLIC	??_C@_0CG@NJMNAEGJ@Workstation?5name?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0CG@KONHMDAE@N?5count?5policy?5?$CIminimum?5clients?$CJ@ ; `string'
PUBLIC	??_C@_0CG@CKMBAHPA@KMS?5host?5extended?5PID?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0CM@BGLDHKHD@KMS?5host?5Hardware?5ID?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0CG@CKOEJNCP@KMS?5host?5current?5active?5clients?5@ ; `string'
PUBLIC	??_C@_0CG@HGDBGCN@Renewal?5interval?5policy?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0CG@EIDEKNCG@Activation?5interval?5policy?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0CD@FAKKKCEM@Compiler?3?5VC?$CL?$CL?5?$CF02i?4?$CF02i?5build?5?$CF@ ; `string'
PUBLIC	??_C@_0O@KEGGAHLA@little?9endian?$AA@		; `string'
PUBLIC	??_C@_0L@JIMEFGOI@big?9endian?$AA@		; `string'
PUBLIC	??_C@_0BI@LFPGKPOF@?5Intel?5x86_64?5Windows64?$AA@ ; `string'
PUBLIC	??_C@_0BJ@MBJNOFCM@Intended?5platform?3?$CFs?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0BB@NGPJLHEC@?5_CRYPTO_WINDOWS?$AA@	; `string'
PUBLIC	??_C@_0BB@NGBEHLG@Common?5flags?3?$CFs?6?$AA@	; `string'
PUBLIC	??_C@_0P@JPKAPDJG@?5DNS_PARSER?$DNOS?$AA@	; `string'
PUBLIC	??_C@_0BA@KMEDHNGP@vlmcs?5flags?3?$CFs?6?$AA@	; `string'
PUBLIC	??_C@_0CO@DNHMBJJK@?5NO_SIGHUP?5THREADS?$DN1?5SUPPORT_WIN@ ; `string'
PUBLIC	??_C@_0BB@OGOEBGIP@vlmcsd?5flags?3?$CFs?6?$AA@	; `string'
EXTRN	__imp__localtime64:PROC
EXTRN	__imp_vfprintf:PROC
EXTRN	__imp_strftime:PROC
EXTRN	__imp__vsnprintf:PROC
EXTRN	__imp_fprintf:PROC
;	COMDAT ??_C@_0BB@OGOEBGIP@vlmcsd?5flags?3?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BB@OGOEBGIP@vlmcsd?5flags?3?$CFs?6?$AA@ DB 'vlmcsd flags:%s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@DNHMBJJK@?5NO_SIGHUP?5THREADS?$DN1?5SUPPORT_WIN@
CONST	SEGMENT
??_C@_0CO@DNHMBJJK@?5NO_SIGHUP?5THREADS?$DN1?5SUPPORT_WIN@ DB ' NO_SIGHUP'
	DB	' THREADS=1 SUPPORT_WINE NO_FREEBIND', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KMEDHNGP@vlmcs?5flags?3?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BA@KMEDHNGP@vlmcs?5flags?3?$CFs?6?$AA@ DB 'vlmcs flags:%s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JPKAPDJG@?5DNS_PARSER?$DNOS?$AA@
CONST	SEGMENT
??_C@_0P@JPKAPDJG@?5DNS_PARSER?$DNOS?$AA@ DB ' DNS_PARSER=OS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NGBEHLG@Common?5flags?3?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BB@NGBEHLG@Common?5flags?3?$CFs?6?$AA@ DB 'Common flags:%s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NGPJLHEC@?5_CRYPTO_WINDOWS?$AA@
CONST	SEGMENT
??_C@_0BB@NGPJLHEC@?5_CRYPTO_WINDOWS?$AA@ DB ' _CRYPTO_WINDOWS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MBJNOFCM@Intended?5platform?3?$CFs?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BJ@MBJNOFCM@Intended?5platform?3?$CFs?5?$CFs?6?$AA@ DB 'Intended p'
	DB	'latform:%s %s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LFPGKPOF@?5Intel?5x86_64?5Windows64?$AA@
CONST	SEGMENT
??_C@_0BI@LFPGKPOF@?5Intel?5x86_64?5Windows64?$AA@ DB ' Intel x86_64 Wind'
	DB	'ows64', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JIMEFGOI@big?9endian?$AA@
CONST	SEGMENT
??_C@_0L@JIMEFGOI@big?9endian?$AA@ DB 'big-endian', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KEGGAHLA@little?9endian?$AA@
CONST	SEGMENT
??_C@_0O@KEGGAHLA@little?9endian?$AA@ DB 'little-endian', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@FAKKKCEM@Compiler?3?5VC?$CL?$CL?5?$CF02i?4?$CF02i?5build?5?$CF@
CONST	SEGMENT
??_C@_0CD@FAKKKCEM@Compiler?3?5VC?$CL?$CL?5?$CF02i?4?$CF02i?5build?5?$CF@ DB 'C'
	DB	'ompiler: VC++ %02i.%02i build %i', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@EIDEKNCG@Activation?5interval?5policy?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CG@EIDEKNCG@Activation?5interval?5policy?5?5?5?5?5?5@ DB 'Activati'
	DB	'on interval policy      : %u', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@HGDBGCN@Renewal?5interval?5policy?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CG@HGDBGCN@Renewal?5interval?5policy?5?5?5?5?5?5?5?5?5@ DB 'Renewa'
	DB	'l interval policy         : %u', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@CKOEJNCP@KMS?5host?5current?5active?5clients?5@
CONST	SEGMENT
??_C@_0CG@CKOEJNCP@KMS?5host?5current?5active?5clients?5@ DB 'KMS host cu'
	DB	'rrent active clients : %u', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@BGLDHKHD@KMS?5host?5Hardware?5ID?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CM@BGLDHKHD@KMS?5host?5Hardware?5ID?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'K'
	DB	'MS host Hardware ID            : %016I64X', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@CKMBAHPA@KMS?5host?5extended?5PID?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CG@CKMBAHPA@KMS?5host?5extended?5PID?5?5?5?5?5?5?5?5?5?5?5@ DB 'KM'
	DB	'S host extended PID           : %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@KONHMDAE@N?5count?5policy?5?$CIminimum?5clients?$CJ@
CONST	SEGMENT
??_C@_0CG@KONHMDAE@N?5count?5policy?5?$CIminimum?5clients?$CJ@ DB 'N coun'
	DB	't policy (minimum clients): %u', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NJMNAEGJ@Workstation?5name?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CG@NJMNAEGJ@Workstation?5name?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'W'
	DB	'orkstation name                : %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@CCLOIHMC@Client?5request?5timestamp?5?$CIUTC?$CJ?5?5@
CONST	SEGMENT
??_C@_0CG@CCLOIHMC@Client?5request?5timestamp?5?$CIUTC?$CJ?5?5@ DB 'Clien'
	DB	't request timestamp (UTC)  : %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EHAPGNAC@?$CFY?9?$CFm?9?$CFd?5?$CFX?$AA@
CONST	SEGMENT
??_C@_0M@EHAPGNAC@?$CFY?9?$CFm?9?$CFd?5?$CFX?$AA@ DB '%Y-%m-%d %X', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@KNAHJFGH@Previous?5client?5machine?5ID?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CG@KNAHJFGH@Previous?5client?5machine?5ID?5?5?5?5?5?5@ DB 'Previou'
	DB	's client machine ID      : %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NAJADCGN@Client?5machine?5ID?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CG@NAJADCGN@Client?5machine?5ID?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'C'
	DB	'lient machine ID               : %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@MNFHGDHP@KMS?5ID?5?$CIaka?5KMS?5counted?5ID?$CJ?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CL@MNFHGDHP@KMS?5ID?5?$CIaka?5KMS?5counted?5ID?$CJ?5?5?5?5?5@ DB 'K'
	DB	'MS ID (aka KMS counted ID)     : %s (%s)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@LLNJLCF@SKU?5ID?5?$CIaka?5Activation?5ID?$CJ?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CL@LLNJLCF@SKU?5ID?5?$CIaka?5Activation?5ID?$CJ?5?5?5?5?5?5@ DB 'S'
	DB	'KU ID (aka Activation ID)      : %s (%s)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@KHCLANPB@Application?5ID?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CL@KHCLANPB@Application?5ID?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'A'
	DB	'pplication ID                  : %s (%s)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@GGDJLANK@Remaining?5time?5?$CI0?5?$DN?5forever?$CJ?5?5?5?5@
CONST	SEGMENT
??_C@_0CO@GGDJLANK@Remaining?5time?5?$CI0?5?$DN?5forever?$CJ?5?5?5?5@ DB 'R'
	DB	'emaining time (0 = forever)    : %i minutes', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@NILKFNNP@Licensing?5status?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CL@NILKFNNP@Licensing?5status?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'L'
	DB	'icensing status                : %u (%s)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@CIJPHHEF@Client?5is?5a?5virtual?5machine?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CG@CIJPHHEF@Client?5is?5a?5virtual?5machine?5?5?5?5?5@ DB 'Client '
	DB	'is a virtual machine     : %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02JINPPBEP@No?$AA@
CONST	SEGMENT
??_C@_02JINPPBEP@No?$AA@ DB 'No', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CCLAEDDF@Yes?$AA@
CONST	SEGMENT
??_C@_03CCLAEDDF@Yes?$AA@ DB 'Yes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@KEHOAAGG@Protocol?5version?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CJ@KEHOAAGG@Protocol?5version?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'P'
	DB	'rotocol version                : %u.%u', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LENFACPA@?$CF08x?9?$CF04x?9?$CF04x?9?$CF04x?9?$CF012I64x?$AA@
CONST	SEGMENT
??_C@_0BN@LENFACPA@?$CF08x?9?$CF04x?9?$CF04x?9?$CF04x?9?$CF012I64x?$AA@ DB '%'
	DB	'08x-%04x-%04x-%04x-%012I64x', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NCPOCFCF@Extended?5grace?$AA@
CONST	SEGMENT
??_C@_0P@NCPOCFCF@Extended?5grace?$AA@ DB 'Extended grace', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OFINCEFP@Notification?$AA@
CONST	SEGMENT
??_C@_0N@OFINCEFP@Notification?$AA@ DB 'Notification', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MHDDAGNF@Non?9Genuine?$AA@
CONST	SEGMENT
??_C@_0M@MHDDAGNF@Non?9Genuine?$AA@ DB 'Non-Genuine', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09CLFMDFGC@OOT?5grace?$AA@
CONST	SEGMENT
??_C@_09CLFMDFGC@OOT?5grace?$AA@ DB 'OOT grace', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JBIIANMO@OOB?5grace?$AA@
CONST	SEGMENT
??_C@_09JBIIANMO@OOB?5grace?$AA@ DB 'OOB grace', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BMJGAJHF@Licensed?$AA@
CONST	SEGMENT
??_C@_08BMJGAJHF@Licensed?$AA@ DB 'Licensed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NFCOGLDB@Unlicensed?$AA@
CONST	SEGMENT
??_C@_0L@NFCOGLDB@Unlicensed?$AA@ DB 'Unlicensed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LNENHMIM@?$CFY?9?$CFm?9?$CFd?5?$CFX?3?5?$AA@
CONST	SEGMENT
??_C@_0O@LNENHMIM@?$CFY?9?$CFm?9?$CFd?5?$CFX?3?5?$AA@ DB '%Y-%m-%d %X: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01MCMALHOG@a?$AA@
CONST	SEGMENT
??_C@_01MCMALHOG@a?$AA@ DB 'a', 00H			; `string'
LicenseStatusText DQ FLAT:??_C@_0L@NFCOGLDB@Unlicensed?$AA@
	DQ	FLAT:??_C@_08BMJGAJHF@Licensed?$AA@
	DQ	FLAT:??_C@_09JBIIANMO@OOB?5grace?$AA@
	DQ	FLAT:??_C@_09CLFMDFGC@OOT?5grace?$AA@
	DQ	FLAT:??_C@_0M@MHDDAGNF@Non?9Genuine?$AA@
	DQ	FLAT:??_C@_0N@OFINCEFP@Notification?$AA@
	DQ	FLAT:??_C@_0P@NCPOCFCF@Extended?5grace?$AA@
PUBLIC	printServerFlags
PUBLIC	printCommonFlags
PUBLIC	printPlatform
PUBLIC	logResponseVerbose
PUBLIC	uuid2StringLE
PUBLIC	logRequestVerbose
PUBLIC	logger
PUBLIC	errorout
PUBLIC	printerrorf
;	COMDAT pdata
pdata	SEGMENT
$pdata$printPlatform DD imagerel $LN4
	DD	imagerel $LN4+62
	DD	imagerel $unwind$printPlatform
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$vlogger DD imagerel vlogger
	DD	imagerel vlogger+299
	DD	imagerel $unwind$vlogger
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$logResponseVerbose DD imagerel $LN9
	DD	imagerel $LN9+300
	DD	imagerel $unwind$logResponseVerbose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$uuid2StringLE DD imagerel $LN4
	DD	imagerel $LN4+86
	DD	imagerel $unwind$uuid2StringLE
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$logRequestVerbose DD imagerel $LN10
	DD	imagerel $LN10+567
	DD	imagerel $unwind$logRequestVerbose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$logger DD imagerel $LN4
	DD	imagerel $LN4+39
	DD	imagerel $unwind$logger
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$errorout DD imagerel $LN4
	DD	imagerel $LN4+78
	DD	imagerel $unwind$errorout
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printerrorf DD imagerel $LN7
	DD	imagerel $LN7+128
	DD	imagerel $unwind$printerrorf
;	COMDAT xdata
xdata	SEGMENT
$unwind$printerrorf DD 031901H
	DD	070154219H
	DD	03014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$errorout DD 021801H
	DD	030143218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$logger DD 011701H
	DD	04217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$logRequestVerbose DD 071b01H
	DD	031741bH
	DD	030341bH
	DD	02c011bH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$uuid2StringLE DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$logResponseVerbose DD 071701H
	DD	0156417H
	DD	0143417H
	DD	0120117H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$vlogger DD 091701H
	DD	01096417H
	DD	01075417H
	DD	01063417H
	DD	01040117H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printPlatform DD 010401H
	DD	04204H
; Function compile flags: /Ogspy
; File c:\users\apple\desktop\vlmcsd\src\output.c
;	COMDAT printerrorf
_TEXT	SEGMENT
fmt$ = 64
printerrorf PROC					; COMDAT

; 109  : {

$LN7:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00007	48 89 50 10	 mov	 QWORD PTR [rax+16], rdx
  0000b	4c 89 40 18	 mov	 QWORD PTR [rax+24], r8
  0000f	4c 89 48 20	 mov	 QWORD PTR [rax+32], r9
  00013	53		 push	 rbx
  00014	57		 push	 rdi
  00015	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 110  : 	int error = errno;

  00019	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno

; 111  : 	va_list arglist;
; 112  : 
; 113  : 	va_start(arglist, fmt);
; 114  : 
; 115  : #	ifdef IS_LIBRARY
; 116  : 
; 117  : 	size_t len = strlen(ErrorMessage);
; 118  : 	vlmcsd_vsnprintf(ErrorMessage + len, MESSAGE_BUFFER_SIZE - len - 1, fmt, arglist);
; 119  : 
; 120  : #	else // !IS_LIBRARY
; 121  : 
; 122  : #	ifndef NO_LOG
; 123  : #	ifdef _NTSERVICE
; 124  : 	if (InetdMode || IsNTService)

  0001f	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR InetdMode, 0
  00026	48 8d 7c 24 48	 lea	 rdi, QWORD PTR fmt$[rsp+8]
  0002b	8b 18		 mov	 ebx, DWORD PTR [rax]
  0002d	75 33		 jne	 SHORT $LN2@printerror
  0002f	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR IsNTService, 0
  00036	75 2a		 jne	 SHORT $LN2@printerror

; 129  : 	else
; 130  : #	endif //NO_LOG
; 131  : 
; 132  : #	endif // IS_LIBRARY
; 133  : 	{
; 134  : 		vfprintf(stderr, fmt, arglist);

  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0003e	48 8b 54 24 40	 mov	 rdx, QWORD PTR fmt$[rsp]
  00043	4c 8b c7	 mov	 r8, rdi
  00046	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_vfprintf

; 135  : 		fflush(stderr);

  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00056	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  0005a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fflush
  00060	eb 0d		 jmp	 SHORT $LN1@printerror
$LN2@printerror:

; 125  : #	else // !_NTSERVICE
; 126  : 	if (InetdMode)
; 127  : #	endif // NTSERVIICE
; 128  : 		vlogger(fmt, arglist);

  00062	48 8b 4c 24 40	 mov	 rcx, QWORD PTR fmt$[rsp]
  00067	48 8b d7	 mov	 rdx, rdi
  0006a	e8 00 00 00 00	 call	 vlogger
$LN1@printerror:

; 136  : 	}
; 137  : 
; 138  : 	va_end(arglist);
; 139  : 	errno = error;

  0006f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00075	89 18		 mov	 DWORD PTR [rax], ebx

; 140  : 	return 0;

  00077	33 c0		 xor	 eax, eax

; 141  : }

  00079	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0007d	5f		 pop	 rdi
  0007e	5b		 pop	 rbx
  0007f	c3		 ret	 0
printerrorf ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\apple\desktop\vlmcsd\src\output.c
;	COMDAT errorout
_TEXT	SEGMENT
fmt$ = 48
errorout PROC						; COMDAT

; 146  : {

$LN4:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00007	48 89 50 10	 mov	 QWORD PTR [rax+16], rdx
  0000b	4c 89 40 18	 mov	 QWORD PTR [rax+24], r8
  0000f	4c 89 48 20	 mov	 QWORD PTR [rax+32], r9
  00013	53		 push	 rbx
  00014	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 147  : 	va_list args;
; 148  : 
; 149  : 	va_start(args, fmt);

  00018	48 8d 58 10	 lea	 rbx, QWORD PTR [rax+16]

; 150  : 	int i = vfprintf(stderr, fmt, args);

  0001c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00022	48 8b 54 24 30	 mov	 rdx, QWORD PTR fmt$[rsp]
  00027	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  0002b	4c 8b c3	 mov	 r8, rbx
  0002e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_vfprintf
  00034	8b d8		 mov	 ebx, eax

; 151  : 	va_end(args);
; 152  : 	fflush(stderr);

  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0003c	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  00040	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fflush

; 153  : 
; 154  : 	return i;

  00046	8b c3		 mov	 eax, ebx

; 155  : }

  00048	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004c	5b		 pop	 rbx
  0004d	c3		 ret	 0
errorout ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\apple\desktop\vlmcsd\src\output.c
;	COMDAT logger
_TEXT	SEGMENT
fmt$ = 48
logger	PROC						; COMDAT

; 95   : {

$LN4:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00007	48 89 50 10	 mov	 QWORD PTR [rax+16], rdx
  0000b	4c 89 40 18	 mov	 QWORD PTR [rax+24], r8
  0000f	4c 89 48 20	 mov	 QWORD PTR [rax+32], r9
  00013	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 96   : 	va_list args;
; 97   : 
; 98   : 	va_start(args, fmt);

  00017	48 8d 50 10	 lea	 rdx, QWORD PTR [rax+16]

; 99   : 	vlogger(fmt, args);

  0001b	e8 00 00 00 00	 call	 vlogger

; 100  : 	va_end(args);
; 101  : 	return 0;

  00020	33 c0		 xor	 eax, eax

; 102  : }

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
logger	ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\apple\desktop\vlmcsd\src\output.c
;	COMDAT logRequestVerbose
_TEXT	SEGMENT
guidBuffer$ = 48
mbstr$ = 96
WorkstationBuffer$ = 160
st$ = 368
Request$ = 368
p$dead$ = 376
productName$ = 376
logRequestVerbose PROC					; COMDAT

; 184  : {

$LN10:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 18	 mov	 QWORD PTR [rax+24], rbx
  00007	48 89 78 20	 mov	 QWORD PTR [rax+32], rdi
  0000b	48 89 50 10	 mov	 QWORD PTR [rax+16], rdx
  0000f	55		 push	 rbp
  00010	48 8d 68 98	 lea	 rbp, QWORD PTR [rax-104]
  00014	48 81 ec 60 01
	00 00		 sub	 rsp, 352		; 00000160H

; 185  : 	char guidBuffer[GUID_STRING_LENGTH + 1];
; 186  : 	char WorkstationBuffer[3 * WORKSTATION_NAME_BUFFER];
; 187  : 	char* productName;
; 188  : 
; 189  : 	p("Protocol version                : %u.%u\n", LE16(Request->MajorVer), LE16(Request->MinorVer));

  0001b	44 0f b7 01	 movzx	 r8d, WORD PTR [rcx]
  0001f	0f b7 51 02	 movzx	 edx, WORD PTR [rcx+2]
  00023	48 8b f9	 mov	 rdi, rcx
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CJ@KEHOAAGG@Protocol?5version?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
  0002d	e8 00 00 00 00	 call	 logger

; 190  : 	p("Client is a virtual machine     : %s\n", LE32(Request->VMInfo) ? "Yes" : "No");

  00032	83 7f 04 00	 cmp	 DWORD PTR [rdi+4], 0
  00036	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03CCLAEDDF@Yes?$AA@
  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02JINPPBEP@No?$AA@
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@CIJPHHEF@Client?5is?5a?5virtual?5machine?5?5?5?5?5@
  0004b	48 0f 45 d0	 cmovne	 rdx, rax
  0004f	e8 00 00 00 00	 call	 logger

; 191  : 	p("Licensing status                : %u (%s)\n", (uint32_t)LE32(Request->LicenseStatus), LE32(Request->LicenseStatus) < vlmcsd_countof(LicenseStatusText) ? LicenseStatusText[LE32(Request->LicenseStatus)] : "Unknown");

  00054	8b 57 08	 mov	 edx, DWORD PTR [rdi+8]
  00057	83 fa 07	 cmp	 edx, 7
  0005a	73 0d		 jae	 SHORT $LN3@logRequest
  0005c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:LicenseStatusText
  00063	4d 8b 04 d0	 mov	 r8, QWORD PTR [r8+rdx*8]
  00067	eb 07		 jmp	 SHORT $LN4@logRequest
$LN3@logRequest:
  00069	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07NBCGADJA@Unknown?$AA@
$LN4@logRequest:
  00070	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CL@NILKFNNP@Licensing?5status?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
  00077	e8 00 00 00 00	 call	 logger

; 192  : 	p("Remaining time (0 = forever)    : %i minutes\n", (uint32_t)LE32(Request->BindingExpiration));

  0007c	8b 57 0c	 mov	 edx, DWORD PTR [rdi+12]
  0007f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@GGDJLANK@Remaining?5time?5?$CI0?5?$DN?5forever?$CJ?5?5?5?5@
  00086	e8 00 00 00 00	 call	 logger

; 193  : 
; 194  : 	uuid2StringLE(&Request->AppID, guidBuffer);

  0008b	48 8d 54 24 30	 lea	 rdx, QWORD PTR guidBuffer$[rsp]
  00090	48 8d 4f 10	 lea	 rcx, QWORD PTR [rdi+16]
  00094	e8 00 00 00 00	 call	 uuid2StringLE

; 195  : 	getProductIndex(&Request->AppID, KmsData->AppItemList, KmsData->AppItemCount, &productName, NULL);

  00099	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR KmsData
  000a0	48 83 64 24 20
	00		 and	 QWORD PTR [rsp+32], 0
  000a6	44 8b 42 0c	 mov	 r8d, DWORD PTR [rdx+12]
  000aa	48 8b 52 18	 mov	 rdx, QWORD PTR [rdx+24]
  000ae	4c 8d 4d 78	 lea	 r9, QWORD PTR productName$[rbp-256]
  000b2	48 8d 4f 10	 lea	 rcx, QWORD PTR [rdi+16]
  000b6	e8 00 00 00 00	 call	 getProductIndex

; 196  : 	p("Application ID                  : %s (%s)\n", guidBuffer, productName);

  000bb	4c 8b 45 78	 mov	 r8, QWORD PTR productName$[rbp-256]
  000bf	48 8d 54 24 30	 lea	 rdx, QWORD PTR guidBuffer$[rsp]
  000c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CL@KHCLANPB@Application?5ID?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
  000cb	e8 00 00 00 00	 call	 logger

; 197  : 
; 198  : 	uuid2StringLE(&Request->ActID, guidBuffer);

  000d0	48 8d 54 24 30	 lea	 rdx, QWORD PTR guidBuffer$[rsp]
  000d5	48 8d 4f 20	 lea	 rcx, QWORD PTR [rdi+32]
  000d9	e8 00 00 00 00	 call	 uuid2StringLE

; 199  : 	getProductIndex(&Request->ActID, KmsData->SkuItemList, KmsData->SkuItemCount, &productName, NULL);

  000de	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR KmsData
  000e5	48 83 64 24 20
	00		 and	 QWORD PTR [rsp+32], 0
  000eb	44 8b 42 14	 mov	 r8d, DWORD PTR [rdx+20]
  000ef	48 8b 52 28	 mov	 rdx, QWORD PTR [rdx+40]
  000f3	4c 8d 4d 78	 lea	 r9, QWORD PTR productName$[rbp-256]
  000f7	48 8d 4f 20	 lea	 rcx, QWORD PTR [rdi+32]
  000fb	e8 00 00 00 00	 call	 getProductIndex

; 200  : 	p("SKU ID (aka Activation ID)      : %s (%s)\n", guidBuffer, productName);

  00100	4c 8b 45 78	 mov	 r8, QWORD PTR productName$[rbp-256]
  00104	48 8d 54 24 30	 lea	 rdx, QWORD PTR guidBuffer$[rsp]
  00109	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CL@LLNJLCF@SKU?5ID?5?$CIaka?5Activation?5ID?$CJ?5?5?5?5?5?5@
  00110	e8 00 00 00 00	 call	 logger

; 201  : 
; 202  : 	uuid2StringLE(&Request->KMSID, guidBuffer);

  00115	48 8d 54 24 30	 lea	 rdx, QWORD PTR guidBuffer$[rsp]
  0011a	48 8d 4f 30	 lea	 rcx, QWORD PTR [rdi+48]
  0011e	e8 00 00 00 00	 call	 uuid2StringLE

; 203  : 	getProductIndex(&Request->KMSID, KmsData->KmsItemList, KmsData->KmsItemCount, &productName, NULL);

  00123	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR KmsData
  0012a	48 83 64 24 20
	00		 and	 QWORD PTR [rsp+32], 0
  00130	44 8b 42 10	 mov	 r8d, DWORD PTR [rdx+16]
  00134	48 8b 52 20	 mov	 rdx, QWORD PTR [rdx+32]
  00138	4c 8d 4d 78	 lea	 r9, QWORD PTR productName$[rbp-256]
  0013c	48 8d 4f 30	 lea	 rcx, QWORD PTR [rdi+48]
  00140	e8 00 00 00 00	 call	 getProductIndex

; 204  : 	p("KMS ID (aka KMS counted ID)     : %s (%s)\n", guidBuffer, productName);

  00145	4c 8b 45 78	 mov	 r8, QWORD PTR productName$[rbp-256]
  00149	48 8d 54 24 30	 lea	 rdx, QWORD PTR guidBuffer$[rsp]
  0014e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CL@MNFHGDHP@KMS?5ID?5?$CIaka?5KMS?5counted?5ID?$CJ?5?5?5?5?5@
  00155	e8 00 00 00 00	 call	 logger

; 205  : 
; 206  : 	uuid2StringLE(&Request->CMID, guidBuffer);

  0015a	48 8d 4f 40	 lea	 rcx, QWORD PTR [rdi+64]
  0015e	48 8d 54 24 30	 lea	 rdx, QWORD PTR guidBuffer$[rsp]
  00163	e8 00 00 00 00	 call	 uuid2StringLE

; 207  : 	p("Client machine ID               : %s\n", guidBuffer);

  00168	48 8d 54 24 30	 lea	 rdx, QWORD PTR guidBuffer$[rsp]
  0016d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@NAJADCGN@Client?5machine?5ID?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
  00174	e8 00 00 00 00	 call	 logger

; 208  : 
; 209  : 	uuid2StringLE(&Request->CMID_prev, guidBuffer);

  00179	48 8d 4f 5c	 lea	 rcx, QWORD PTR [rdi+92]
  0017d	48 8d 54 24 30	 lea	 rdx, QWORD PTR guidBuffer$[rsp]
  00182	e8 00 00 00 00	 call	 uuid2StringLE

; 210  : 	p("Previous client machine ID      : %s\n", guidBuffer);

  00187	48 8d 54 24 30	 lea	 rdx, QWORD PTR guidBuffer$[rsp]
  0018c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@KNAHJFGH@Previous?5client?5machine?5ID?5?5?5?5?5?5@
  00193	e8 00 00 00 00	 call	 logger

; 211  : 
; 212  : 
; 213  : 	char mbstr[64];
; 214  : 	time_t st;
; 215  : 	st = fileTimeToUnixTime(&Request->ClientTime);

  00198	48 b8 bd 42 7a
	e5 d5 94 bf d6	 mov	 rax, -2972493582642298179 ; d6bf94d5e57a42bdH

; 216  : 	strftime(mbstr, sizeof(mbstr), "%Y-%m-%d %X", gmtime(&st));

  001a2	48 8d 4d 70	 lea	 rcx, QWORD PTR st$[rbp-256]
  001a6	48 f7 67 54	 mul	 QWORD PTR [rdi+84]
  001aa	48 c1 ea 17	 shr	 rdx, 23
  001ae	48 b8 00 91 10
	b6 02 00 00 00	 mov	 rax, 11644473600	; 00000002b6109100H
  001b8	48 2b d0	 sub	 rdx, rax
  001bb	48 89 55 70	 mov	 QWORD PTR st$[rbp-256], rdx
  001bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__gmtime64
  001c5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@EHAPGNAC@?$CFY?9?$CFm?9?$CFd?5?$CFX?$AA@
  001cc	48 8d 4c 24 60	 lea	 rcx, QWORD PTR mbstr$[rsp]
  001d1	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  001d6	4c 8b c8	 mov	 r9, rax
  001d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strftime

; 217  : 	p("Client request timestamp (UTC)  : %s\n", mbstr);

  001df	48 8d 54 24 60	 lea	 rdx, QWORD PTR mbstr$[rsp]
  001e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@CCLOIHMC@Client?5request?5timestamp?5?$CIUTC?$CJ?5?5@
  001eb	e8 00 00 00 00	 call	 logger

; 218  : 
; 219  : 	ucs2_to_utf8(Request->WorkstationName, WorkstationBuffer, WORKSTATION_NAME_BUFFER, sizeof(WorkstationBuffer));

  001f0	48 8d 4f 6c	 lea	 rcx, QWORD PTR [rdi+108]
  001f4	48 8d 55 a0	 lea	 rdx, QWORD PTR WorkstationBuffer$[rbp-256]
  001f8	41 b9 c0 00 00
	00		 mov	 r9d, 192		; 000000c0H
  001fe	e8 00 00 00 00	 call	 ucs2_to_utf8

; 220  : 
; 221  : 	p("Workstation name                : %s\n", WorkstationBuffer);

  00203	48 8d 55 a0	 lea	 rdx, QWORD PTR WorkstationBuffer$[rbp-256]
  00207	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@NJMNAEGJ@Workstation?5name?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
  0020e	e8 00 00 00 00	 call	 logger

; 222  : 	p("N count policy (minimum clients): %u\n", (uint32_t)LE32(Request->N_Policy));

  00213	8b 57 50	 mov	 edx, DWORD PTR [rdi+80]
  00216	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@KONHMDAE@N?5count?5policy?5?$CIminimum?5clients?$CJ@
  0021d	e8 00 00 00 00	 call	 logger

; 223  : }

  00222	4c 8d 9c 24 60
	01 00 00	 lea	 r11, QWORD PTR [rsp+352]
  0022a	49 8b 5b 20	 mov	 rbx, QWORD PTR [r11+32]
  0022e	49 8b 7b 28	 mov	 rdi, QWORD PTR [r11+40]
  00232	49 8b e3	 mov	 rsp, r11
  00235	5d		 pop	 rbp
  00236	c3		 ret	 0
logRequestVerbose ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\apple\desktop\vlmcsd\src\output.c
;	COMDAT uuid2StringLE
_TEXT	SEGMENT
guid$ = 80
string$ = 88
uuid2StringLE PROC					; COMDAT

; 167  : {

$LN4:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 168  : 	sprintf(string,
; 169  : #		ifdef _WIN32
; 170  : 		"%08x-%04x-%04x-%04x-%012I64x",
; 171  : #		else
; 172  : 		"%08x-%04x-%04x-%04x-%012llx",
; 173  : #		endif
; 174  : 		(unsigned int)LE32(guid->Data1),
; 175  : 		(unsigned int)LE16(guid->Data2),
; 176  : 		(unsigned int)LE16(guid->Data3),
; 177  : 		(unsigned int)BE16(*(uint16_t*)guid->Data4),
; 178  : 		(unsigned long long)BE64(*(uint64_t*)(guid->Data4)) & 0xffffffffffffLL
; 179  : 	);

  00004	4c 8b 51 08	 mov	 r10, QWORD PTR [rcx+8]
  00008	44 0f b7 49 04	 movzx	 r9d, WORD PTR [rcx+4]
  0000d	48 b8 ff ff ff
	ff ff ff 00 00	 mov	 rax, 281474976710655	; 0000ffffffffffffH
  00017	4c 8b da	 mov	 r11, rdx
  0001a	49 0f ca	 bswap	 r10
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@LENFACPA@?$CF08x?9?$CF04x?9?$CF04x?9?$CF04x?9?$CF012I64x?$AA@
  00024	4c 23 d0	 and	 r10, rax
  00027	0f b7 41 08	 movzx	 eax, WORD PTR [rcx+8]
  0002b	4c 89 54 24 30	 mov	 QWORD PTR [rsp+48], r10
  00030	66 c1 c8 08	 ror	 ax, 8
  00034	44 0f b7 c0	 movzx	 r8d, ax
  00038	0f b7 41 06	 movzx	 eax, WORD PTR [rcx+6]
  0003c	44 89 44 24 28	 mov	 DWORD PTR [rsp+40], r8d
  00041	44 8b 01	 mov	 r8d, DWORD PTR [rcx]
  00044	49 8b cb	 mov	 rcx, r11
  00047	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sprintf

; 180  : }

  00051	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00055	c3		 ret	 0
uuid2StringLE ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\apple\desktop\vlmcsd\src\output.c
;	COMDAT logResponseVerbose
_TEXT	SEGMENT
guidBuffer$ = 32
mbstr$ = 80
ePID$ = 160
hwid$ = 168
response$ = 176
p$dead$ = 184
st$ = 184
logResponseVerbose PROC					; COMDAT

; 226  : {

$LN9:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  0000f	57		 push	 rdi
  00010	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  00017	49 8b f8	 mov	 rdi, r8

; 227  : 	char guidBuffer[GUID_STRING_LENGTH + 1];
; 228  : 
; 229  : 	p("Protocol version                : %u.%u\n", (uint32_t)LE16(response->MajorVer), (uint32_t)LE16(response->MinorVer));

  0001a	45 0f b7 00	 movzx	 r8d, WORD PTR [r8]
  0001e	48 8b f2	 mov	 rsi, rdx
  00021	0f b7 57 02	 movzx	 edx, WORD PTR [rdi+2]
  00025	48 8b d9	 mov	 rbx, rcx
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CJ@KEHOAAGG@Protocol?5version?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
  0002f	e8 00 00 00 00	 call	 logger

; 230  : 	p("KMS host extended PID           : %s\n", ePID);

  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@CKMBAHPA@KMS?5host?5extended?5PID?5?5?5?5?5?5?5?5?5?5?5@
  0003b	48 8b d3	 mov	 rdx, rbx
  0003e	e8 00 00 00 00	 call	 logger

; 231  : 	if (LE16(response->MajorVer) > 5)

  00043	66 83 7f 02 05	 cmp	 WORD PTR [rdi+2], 5
  00048	76 12		 jbe	 SHORT $LN1@logRespons

; 232  : #	ifndef _WIN32
; 233  : 		p("KMS host Hardware ID            : %016llX\n", (unsigned long long)BE64(*(uint64_t*)hwid));
; 234  : #	else // _WIN32
; 235  : 		p("KMS host Hardware ID            : %016I64X\n", (unsigned long long)BE64(*(uint64_t*)hwid));

  0004a	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CM@BGLDHKHD@KMS?5host?5Hardware?5ID?5?5?5?5?5?5?5?5?5?5?5?5@
  00054	48 0f ca	 bswap	 rdx
  00057	e8 00 00 00 00	 call	 logger
$LN1@logRespons:

; 236  : #	endif // WIN32
; 237  : 
; 238  : 	uuid2StringLE(&response->CMID, guidBuffer);

  0005c	48 8d 8f 88 00
	00 00		 lea	 rcx, QWORD PTR [rdi+136]
  00063	48 8d 54 24 20	 lea	 rdx, QWORD PTR guidBuffer$[rsp]
  00068	e8 00 00 00 00	 call	 uuid2StringLE

; 239  : 	p("Client machine ID               : %s\n", guidBuffer);

  0006d	48 8d 54 24 20	 lea	 rdx, QWORD PTR guidBuffer$[rsp]
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@NAJADCGN@Client?5machine?5ID?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
  00079	e8 00 00 00 00	 call	 logger

; 240  : 
; 241  : 	char mbstr[64];
; 242  : 	time_t st;
; 243  : 
; 244  : 	st = fileTimeToUnixTime(&response->ClientTime);

  0007e	48 b8 bd 42 7a
	e5 d5 94 bf d6	 mov	 rax, -2972493582642298179 ; d6bf94d5e57a42bdH

; 245  : 	strftime(mbstr, sizeof(mbstr), "%Y-%m-%d %X", gmtime(&st));

  00088	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR st$[rsp]
  00090	48 f7 a7 98 00
	00 00		 mul	 QWORD PTR [rdi+152]
  00097	48 c1 ea 17	 shr	 rdx, 23
  0009b	48 b8 00 91 10
	b6 02 00 00 00	 mov	 rax, 11644473600	; 00000002b6109100H
  000a5	48 2b d0	 sub	 rdx, rax
  000a8	48 89 94 24 b8
	00 00 00	 mov	 QWORD PTR st$[rsp], rdx
  000b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__gmtime64
  000b6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@EHAPGNAC@?$CFY?9?$CFm?9?$CFd?5?$CFX?$AA@
  000bd	48 8d 4c 24 50	 lea	 rcx, QWORD PTR mbstr$[rsp]
  000c2	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000c7	4c 8b c8	 mov	 r9, rax
  000ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strftime

; 246  : 	p("Client request timestamp (UTC)  : %s\n", mbstr);

  000d0	48 8d 54 24 50	 lea	 rdx, QWORD PTR mbstr$[rsp]
  000d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@CCLOIHMC@Client?5request?5timestamp?5?$CIUTC?$CJ?5?5@
  000dc	e8 00 00 00 00	 call	 logger

; 247  : 
; 248  : 	p("KMS host current active clients : %u\n", (uint32_t)LE32(response->Count));

  000e1	8b 97 a0 00 00
	00		 mov	 edx, DWORD PTR [rdi+160]
  000e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@CKOEJNCP@KMS?5host?5current?5active?5clients?5@
  000ee	e8 00 00 00 00	 call	 logger

; 249  : 	p("Renewal interval policy         : %u\n", (uint32_t)LE32(response->VLRenewalInterval));

  000f3	8b 97 a8 00 00
	00		 mov	 edx, DWORD PTR [rdi+168]
  000f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@HGDBGCN@Renewal?5interval?5policy?5?5?5?5?5?5?5?5?5@
  00100	e8 00 00 00 00	 call	 logger

; 250  : 	p("Activation interval policy      : %u\n", (uint32_t)LE32(response->VLActivationInterval));

  00105	8b 97 a4 00 00
	00		 mov	 edx, DWORD PTR [rdi+164]
  0010b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@EIDEKNCG@Activation?5interval?5policy?5?5?5?5?5?5@
  00112	e8 00 00 00 00	 call	 logger

; 251  : }

  00117	4c 8d 9c 24 90
	00 00 00	 lea	 r11, QWORD PTR [rsp+144]
  0011f	49 8b 5b 10	 mov	 rbx, QWORD PTR [r11+16]
  00123	49 8b 73 18	 mov	 rsi, QWORD PTR [r11+24]
  00127	49 8b e3	 mov	 rsp, r11
  0012a	5f		 pop	 rdi
  0012b	c3		 ret	 0
logResponseVerbose ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\time.inl
;	COMDAT gmtime
_TEXT	SEGMENT
_Time$ = 8
gmtime	PROC						; COMDAT

; 101  : #pragma warning( push )
; 102  : #pragma warning( disable : 4996 )
; 103  :     return _gmtime64(_Time);

  00000	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp__gmtime64
gmtime	ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\time.inl
;	COMDAT localtime
_TEXT	SEGMENT
_Time$ = 8
localtime PROC						; COMDAT

; 114  : #pragma warning( push )
; 115  : #pragma warning( disable : 4996 )
; 116  :     return _localtime64(_Time);

  00000	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp__localtime64
localtime ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\time.inl
;	COMDAT time
_TEXT	SEGMENT
_Time$dead$ = 8
time	PROC						; COMDAT

; 133  :     return _time64(_Time);

  00000	33 c9		 xor	 ecx, ecx
  00002	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp__time64
time	ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\apple\desktop\vlmcsd\src\output.c
;	COMDAT vlogger
_TEXT	SEGMENT
mbstr$ = 32
message$ = 2096
args$ = 2104
now$ = 2112
vlogger	PROC						; COMDAT

; 23   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	57		 push	 rdi
  00010	48 81 ec 20 08
	00 00		 sub	 rsp, 2080		; 00000820H

; 24   : 	FILE *log;
; 25   : 
; 26   : #	ifdef _NTSERVICE
; 27   : 	if (!IsNTService && logstdout) log = stdout;

  00017	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR IsNTService, 0
  0001e	48 8b f2	 mov	 rsi, rdx
  00021	48 8b e9	 mov	 rbp, rcx
  00024	75 15		 jne	 SHORT $LN7@vlogger
  00026	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR logstdout, 0
  0002d	74 0c		 je	 SHORT $LN7@vlogger
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00035	48 8d 58 30	 lea	 rbx, QWORD PTR [rax+48]

; 28   : #	else
; 29   : 	if (logstdout) log = stdout;
; 30   : #	endif
; 31   : 	else

  00039	eb 29		 jmp	 SHORT $LN4@vlogger
$LN7@vlogger:

; 32   : 	{
; 33   : 		if (fn_log == NULL) return;

  0003b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR fn_log
  00042	48 85 c9	 test	 rcx, rcx
  00045	0f 84 c7 00 00
	00		 je	 $LN1@vlogger

; 34   : 
; 35   : #		ifndef _WIN32
; 36   : 		if (!strcmp(fn_log, "syslog"))
; 37   : 		{
; 38   : 			openlog("vlmcsd", LOG_CONS | LOG_PID, LOG_USER);
; 39   : 
; 40   : 			////PORTABILITY: vsyslog is not in Posix but virtually all Unixes have it
; 41   : 			vsyslog(LOG_INFO, message, args);
; 42   : 
; 43   : 			closelog();
; 44   : 			return;
; 45   : 		}
; 46   : #		endif // _WIN32
; 47   : 
; 48   : 		log = fopen(fn_log, "a");

  0004b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01MCMALHOG@a?$AA@
  00052	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fopen
  00058	48 8b d8	 mov	 rbx, rax

; 49   : 		if (!log) return;

  0005b	48 85 c0	 test	 rax, rax
  0005e	0f 84 ae 00 00
	00		 je	 $LN1@vlogger
$LN4@vlogger:

; 50   : 	}
; 51   : 
; 52   : 	time_t now = time(0);

  00064	33 c9		 xor	 ecx, ecx
  00066	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__time64

; 53   : 
; 54   : #	ifdef USE_THREADS
; 55   : 	char mbstr[2048];
; 56   : #	else
; 57   : 	char mbstr[24];
; 58   : #	endif
; 59   : 
; 60   : 	if (LogDateAndTime)

  0006c	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR LogDateAndTime, 0
  00073	bf 00 08 00 00	 mov	 edi, 2048		; 00000800H
  00078	48 89 84 24 40
	08 00 00	 mov	 QWORD PTR now$[rsp], rax
  00080	74 27		 je	 SHORT $LN3@vlogger

; 61   : 		strftime(mbstr, sizeof(mbstr), "%Y-%m-%d %X: ", localtime(&now));

  00082	48 8d 8c 24 40
	08 00 00	 lea	 rcx, QWORD PTR now$[rsp]
  0008a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__localtime64
  00090	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@LNENHMIM@?$CFY?9?$CFm?9?$CFd?5?$CFX?3?5?$AA@
  00097	48 8d 4c 24 20	 lea	 rcx, QWORD PTR mbstr$[rsp]
  0009c	4c 8b c8	 mov	 r9, rax
  0009f	8b d7		 mov	 edx, edi
  000a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strftime

; 62   : 	else

  000a7	eb 05		 jmp	 SHORT $LN2@vlogger
$LN3@vlogger:

; 63   : 		*mbstr = 0;

  000a9	c6 44 24 20 00	 mov	 BYTE PTR mbstr$[rsp], 0
$LN2@vlogger:

; 64   : 
; 65   : #	ifndef USE_THREADS
; 66   : 
; 67   : 	fprintf(log, "%s", mbstr);
; 68   : 	vfprintf(log, message, args);
; 69   : 	fflush(log);
; 70   : 
; 71   : #	else // USE_THREADS
; 72   : 
; 73   : 	// We write everything to a string before we really log inside the critical section
; 74   : 	// so formatting the output can be concurrent
; 75   : 	int len = (int)strlen(mbstr);

  000ae	48 8d 4c 24 20	 lea	 rcx, QWORD PTR mbstr$[rsp]
  000b3	48 83 c8 ff	 or	 rax, -1
$LL14@vlogger:
  000b7	48 ff c0	 inc	 rax
  000ba	80 3c 01 00	 cmp	 BYTE PTR [rcx+rax], 0
  000be	75 f7		 jne	 SHORT $LL14@vlogger

; 76   : 	//#	if !_MSC_VER
; 77   : 
; 78   : 	vlmcsd_vsnprintf(mbstr + len, sizeof(mbstr) - len, message, args);

  000c0	48 98		 cdqe
  000c2	48 8d 4c 24 20	 lea	 rcx, QWORD PTR mbstr$[rsp]
  000c7	4c 8b ce	 mov	 r9, rsi
  000ca	48 2b f8	 sub	 rdi, rax
  000cd	48 03 c8	 add	 rcx, rax
  000d0	4c 8b c5	 mov	 r8, rbp
  000d3	48 8b d7	 mov	 rdx, rdi
  000d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__vsnprintf

; 79   : 	//#	else
; 80   : 	//	wvsprintf(mbstr + len, message, args);
; 81   : 	//#	endif
; 82   : 
; 83   : 	lock_mutex(&logmutex);
; 84   : 	fprintf(log, "%s", mbstr);

  000dc	4c 8d 44 24 20	 lea	 r8, QWORD PTR mbstr$[rsp]
  000e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs?$AA@
  000e8	48 8b cb	 mov	 rcx, rbx
  000eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 85   : 	fflush(log);

  000f1	48 8b cb	 mov	 rcx, rbx
  000f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fflush

; 86   : 	unlock_mutex(&logmutex);
; 87   : 
; 88   : #	endif // USE_THREADS
; 89   : 	if (log != stdout) fclose(log);

  000fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00100	48 83 c0 30	 add	 rax, 48			; 00000030H
  00104	48 3b d8	 cmp	 rbx, rax
  00107	74 09		 je	 SHORT $LN1@vlogger
  00109	48 8b cb	 mov	 rcx, rbx
  0010c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose
$LN1@vlogger:

; 90   : }

  00112	4c 8d 9c 24 20
	08 00 00	 lea	 r11, QWORD PTR [rsp+2080]
  0011a	49 8b 5b 10	 mov	 rbx, QWORD PTR [r11+16]
  0011e	49 8b 6b 18	 mov	 rbp, QWORD PTR [r11+24]
  00122	49 8b 73 28	 mov	 rsi, QWORD PTR [r11+40]
  00126	49 8b e3	 mov	 rsp, r11
  00129	5f		 pop	 rdi
  0012a	c3		 ret	 0
vlogger	ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\apple\desktop\vlmcsd\src\output.c
;	COMDAT printPlatform
_TEXT	SEGMENT
printPlatform PROC					; COMDAT

; 257  : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 258  : 	int testNumber = 0x1234;
; 259  : 
; 260  : #	if _MSC_VER
; 261  : 	printf("Compiler: VC++ %02i.%02i build %i\n", _MSC_VER / 100, _MSC_VER % 100, _MSC_FULL_VER % 100000);

  00004	45 33 c0	 xor	 r8d, r8d
  00007	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@FAKKKCEM@Compiler?3?5VC?$CL?$CL?5?$CF02i?4?$CF02i?5build?5?$CF@
  0000e	41 b9 b5 9e 00
	00		 mov	 r9d, 40629		; 00009eb5H
  00014	41 8d 50 12	 lea	 edx, QWORD PTR [r8+18]
  00018	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf

; 262  : #	elif defined(VLMCSD_COMPILER)
; 263  : 	printf
; 264  : 	(
; 265  : 		"Compiler: %s\n", VLMCSD_COMPILER
; 266  : #		ifdef __VERSION__
; 267  : 		" " __VERSION__
; 268  : #		endif // __VERSION__
; 269  : 	);
; 270  : #	endif // VLMCSD_COMPILER
; 271  : 
; 272  : 	printf
; 273  : 	(
; 274  : 		"Intended platform:%s %s\n", ""
; 275  : 
; 276  : #		if __i386__ || _M_IX86
; 277  : 		" Intel x86"
; 278  : #		endif
; 279  : 
; 280  : #		if __x86_64__ || __amd64__ || _M_X64 || _M_AMD64
; 281  : 		" Intel x86_64"
; 282  : #		endif
; 283  : 
; 284  : #		if _M_ARM || __arm__
; 285  : 		" ARM"
; 286  : #		endif
; 287  : 
; 288  : #		if __thumb__
; 289  : 		" thumb"
; 290  : #		endif
; 291  : 
; 292  : #		if __aarch64__
; 293  : 		" ARM64"
; 294  : #		endif
; 295  : 
; 296  : #		if __hppa__
; 297  : 		" HP/PA RISC"
; 298  : #		endif
; 299  : 
; 300  : #		if __ia64__
; 301  : 		" Intel Itanium"
; 302  : #		endif
; 303  : 
; 304  : #		if __mips__
; 305  : 		" MIPS"
; 306  : #		endif
; 307  : 
; 308  : #		if defined(_MIPS_ARCH)
; 309  : 		" " _MIPS_ARCH
; 310  : #		endif
; 311  : 
; 312  : #		if __mips16
; 313  : 		" mips16"
; 314  : #		endif
; 315  : 
; 316  : #		if __mips_micromips
; 317  : 		" micromips"
; 318  : #		endif
; 319  : 
; 320  : #		if __ppc__ || __powerpc__
; 321  : 		" PowerPC"
; 322  : #		endif
; 323  : 
; 324  : #		if __powerpc64__ || __ppc64__
; 325  : 		" PowerPC64"
; 326  : #		endif
; 327  : 
; 328  : #		if __sparc__
; 329  : 		" SPARC"
; 330  : #		endif
; 331  : 
; 332  : #		if defined(__s390__) && !defined(__zarch__) && !defined(__s390x__)
; 333  : 		" IBM S/390"
; 334  : #		endif
; 335  : 
; 336  : #		if __zarch__ || __s390x__
; 337  : 		" IBM z/Arch (S/390x)"
; 338  : #		endif
; 339  : 
; 340  : #		if __m68k__
; 341  : 		" Motorola 68k"
; 342  : #		endif
; 343  : 
; 344  : #		if __ANDROID__
; 345  : 		" Android"
; 346  : #		endif
; 347  : 
; 348  : #		if __ANDROID_API__
; 349  : 		" (API level " ANDROID_API_LEVEL ")"
; 350  : #		endif
; 351  : 
; 352  : #		if __FreeBSD__ || __FreeBSD_kernel__
; 353  : 		" FreeBSD"
; 354  : #		endif
; 355  : 
; 356  : #		if __NetBSD__
; 357  : 		" NetBSD"
; 358  : #		endif
; 359  : 
; 360  : #		if __OpenBSD__
; 361  : 		" OpenBSD"
; 362  : #		endif
; 363  : 
; 364  : #		if __DragonFly__
; 365  : 		" DragonFly BSD"
; 366  : #		endif
; 367  : 
; 368  : #		if defined(__CYGWIN__) && !defined(_WIN64)
; 369  : 		" Cygwin32"
; 370  : #		endif
; 371  : 
; 372  : #		if defined(__CYGWIN__) && defined(_WIN64)
; 373  : 		" Cygwin64"
; 374  : #		endif
; 375  : 
; 376  : #		if __GNU__
; 377  : 		" GNU"
; 378  : #		endif
; 379  : 
; 380  : #		if __gnu_hurd__
; 381  : 		" Hurd"
; 382  : #		endif
; 383  : 
; 384  : #		if __MACH__
; 385  : 		" Mach"
; 386  : #		endif
; 387  : 
; 388  : #		if __linux__
; 389  : 		" Linux"
; 390  : #		endif
; 391  : 
; 392  : #		if __APPLE__ && __MACH__
; 393  : 		" Darwin"
; 394  : #		endif
; 395  : 
; 396  : #		if  __minix__
; 397  : 		" Minix"
; 398  : #		endif
; 399  : 
; 400  : #		if __QNX__
; 401  : 		" QNX"
; 402  : #		endif
; 403  : 
; 404  : #		if __svr4__ || __SVR4
; 405  : 		" SYSV R4"
; 406  : #		endif	
; 407  : 
; 408  : #		if (defined(__sun__) || defined(sun) || defined(__sun)) && (defined(__SVR4) || defined(__svr4__))
; 409  : 		" Solaris"
; 410  : #		endif
; 411  : 
; 412  : #		if (defined(__sun__) || defined(sun) || defined(__sun)) && !defined(__SVR4) && !defined(__svr4__)
; 413  : 		" SunOS"
; 414  : #		endif
; 415  : 
; 416  : #		if defined(_WIN32) && !defined(_WIN64)
; 417  : 		" Windows32"
; 418  : #		endif
; 419  : 
; 420  : #		if defined(_WIN32) && defined(_WIN64)
; 421  : 		" Windows64"
; 422  : #		endif
; 423  : 
; 424  : #		if __MVS__ || __TOS_MVS__
; 425  : 		" z/OS"
; 426  : #		endif
; 427  : 
; 428  : #		if defined(__GLIBC__) && !defined(__UCLIBC__)
; 429  : 		" glibc"
; 430  : #		endif
; 431  : 
; 432  : #		if __UCLIBC__
; 433  : 		" uclibc"
; 434  : #		endif
; 435  : 
; 436  : #		if defined(__linux__) && !defined(__GLIBC__) && !defined(__UCLIBC__) && !defined(__ANDROID__) && !defined(__BIONIC__)
; 437  : 		" musl"
; 438  : #		endif
; 439  : 
; 440  : 		//#		if _MIPSEL || __MIPSEL__ || __ARMEL__ || __THUMBEL__
; 441  : 		//		" little-endian"
; 442  : 		//#		endif
; 443  : 		//
; 444  : 		//#		if _MIPSEB || __MIPSEB__ || __ARMEB__ || __THUMBEB__
; 445  : 		//		" big-endian"
; 446  : 		//#		endif
; 447  : 
; 448  : #		if __PIE__ || __pie__
; 449  : 		" PIE"
; 450  : #		endif
; 451  : 		,
; 452  : 		*((uint8_t*)&testNumber) == 0x34 ? "little-endian" : "big-endian"
; 453  : 	);

  0001e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@KEGGAHLA@little?9endian?$AA@
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LFPGKPOF@?5Intel?5x86_64?5Windows64?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@MBJNOFCM@Intended?5platform?3?$CFs?5?$CFs?6?$AA@

; 454  : 
; 455  : }

  00033	48 83 c4 28	 add	 rsp, 40			; 00000028H

; 262  : #	elif defined(VLMCSD_COMPILER)
; 263  : 	printf
; 264  : 	(
; 265  : 		"Compiler: %s\n", VLMCSD_COMPILER
; 266  : #		ifdef __VERSION__
; 267  : 		" " __VERSION__
; 268  : #		endif // __VERSION__
; 269  : 	);
; 270  : #	endif // VLMCSD_COMPILER
; 271  : 
; 272  : 	printf
; 273  : 	(
; 274  : 		"Intended platform:%s %s\n", ""
; 275  : 
; 276  : #		if __i386__ || _M_IX86
; 277  : 		" Intel x86"
; 278  : #		endif
; 279  : 
; 280  : #		if __x86_64__ || __amd64__ || _M_X64 || _M_AMD64
; 281  : 		" Intel x86_64"
; 282  : #		endif
; 283  : 
; 284  : #		if _M_ARM || __arm__
; 285  : 		" ARM"
; 286  : #		endif
; 287  : 
; 288  : #		if __thumb__
; 289  : 		" thumb"
; 290  : #		endif
; 291  : 
; 292  : #		if __aarch64__
; 293  : 		" ARM64"
; 294  : #		endif
; 295  : 
; 296  : #		if __hppa__
; 297  : 		" HP/PA RISC"
; 298  : #		endif
; 299  : 
; 300  : #		if __ia64__
; 301  : 		" Intel Itanium"
; 302  : #		endif
; 303  : 
; 304  : #		if __mips__
; 305  : 		" MIPS"
; 306  : #		endif
; 307  : 
; 308  : #		if defined(_MIPS_ARCH)
; 309  : 		" " _MIPS_ARCH
; 310  : #		endif
; 311  : 
; 312  : #		if __mips16
; 313  : 		" mips16"
; 314  : #		endif
; 315  : 
; 316  : #		if __mips_micromips
; 317  : 		" micromips"
; 318  : #		endif
; 319  : 
; 320  : #		if __ppc__ || __powerpc__
; 321  : 		" PowerPC"
; 322  : #		endif
; 323  : 
; 324  : #		if __powerpc64__ || __ppc64__
; 325  : 		" PowerPC64"
; 326  : #		endif
; 327  : 
; 328  : #		if __sparc__
; 329  : 		" SPARC"
; 330  : #		endif
; 331  : 
; 332  : #		if defined(__s390__) && !defined(__zarch__) && !defined(__s390x__)
; 333  : 		" IBM S/390"
; 334  : #		endif
; 335  : 
; 336  : #		if __zarch__ || __s390x__
; 337  : 		" IBM z/Arch (S/390x)"
; 338  : #		endif
; 339  : 
; 340  : #		if __m68k__
; 341  : 		" Motorola 68k"
; 342  : #		endif
; 343  : 
; 344  : #		if __ANDROID__
; 345  : 		" Android"
; 346  : #		endif
; 347  : 
; 348  : #		if __ANDROID_API__
; 349  : 		" (API level " ANDROID_API_LEVEL ")"
; 350  : #		endif
; 351  : 
; 352  : #		if __FreeBSD__ || __FreeBSD_kernel__
; 353  : 		" FreeBSD"
; 354  : #		endif
; 355  : 
; 356  : #		if __NetBSD__
; 357  : 		" NetBSD"
; 358  : #		endif
; 359  : 
; 360  : #		if __OpenBSD__
; 361  : 		" OpenBSD"
; 362  : #		endif
; 363  : 
; 364  : #		if __DragonFly__
; 365  : 		" DragonFly BSD"
; 366  : #		endif
; 367  : 
; 368  : #		if defined(__CYGWIN__) && !defined(_WIN64)
; 369  : 		" Cygwin32"
; 370  : #		endif
; 371  : 
; 372  : #		if defined(__CYGWIN__) && defined(_WIN64)
; 373  : 		" Cygwin64"
; 374  : #		endif
; 375  : 
; 376  : #		if __GNU__
; 377  : 		" GNU"
; 378  : #		endif
; 379  : 
; 380  : #		if __gnu_hurd__
; 381  : 		" Hurd"
; 382  : #		endif
; 383  : 
; 384  : #		if __MACH__
; 385  : 		" Mach"
; 386  : #		endif
; 387  : 
; 388  : #		if __linux__
; 389  : 		" Linux"
; 390  : #		endif
; 391  : 
; 392  : #		if __APPLE__ && __MACH__
; 393  : 		" Darwin"
; 394  : #		endif
; 395  : 
; 396  : #		if  __minix__
; 397  : 		" Minix"
; 398  : #		endif
; 399  : 
; 400  : #		if __QNX__
; 401  : 		" QNX"
; 402  : #		endif
; 403  : 
; 404  : #		if __svr4__ || __SVR4
; 405  : 		" SYSV R4"
; 406  : #		endif	
; 407  : 
; 408  : #		if (defined(__sun__) || defined(sun) || defined(__sun)) && (defined(__SVR4) || defined(__svr4__))
; 409  : 		" Solaris"
; 410  : #		endif
; 411  : 
; 412  : #		if (defined(__sun__) || defined(sun) || defined(__sun)) && !defined(__SVR4) && !defined(__svr4__)
; 413  : 		" SunOS"
; 414  : #		endif
; 415  : 
; 416  : #		if defined(_WIN32) && !defined(_WIN64)
; 417  : 		" Windows32"
; 418  : #		endif
; 419  : 
; 420  : #		if defined(_WIN32) && defined(_WIN64)
; 421  : 		" Windows64"
; 422  : #		endif
; 423  : 
; 424  : #		if __MVS__ || __TOS_MVS__
; 425  : 		" z/OS"
; 426  : #		endif
; 427  : 
; 428  : #		if defined(__GLIBC__) && !defined(__UCLIBC__)
; 429  : 		" glibc"
; 430  : #		endif
; 431  : 
; 432  : #		if __UCLIBC__
; 433  : 		" uclibc"
; 434  : #		endif
; 435  : 
; 436  : #		if defined(__linux__) && !defined(__GLIBC__) && !defined(__UCLIBC__) && !defined(__ANDROID__) && !defined(__BIONIC__)
; 437  : 		" musl"
; 438  : #		endif
; 439  : 
; 440  : 		//#		if _MIPSEL || __MIPSEL__ || __ARMEL__ || __THUMBEL__
; 441  : 		//		" little-endian"
; 442  : 		//#		endif
; 443  : 		//
; 444  : 		//#		if _MIPSEB || __MIPSEB__ || __ARMEB__ || __THUMBEB__
; 445  : 		//		" big-endian"
; 446  : 		//#		endif
; 447  : 
; 448  : #		if __PIE__ || __pie__
; 449  : 		" PIE"
; 450  : #		endif
; 451  : 		,
; 452  : 		*((uint8_t*)&testNumber) == 0x34 ? "little-endian" : "big-endian"
; 453  : 	);

  00037	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_printf
printPlatform ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\apple\desktop\vlmcsd\src\output.c
;	COMDAT printCommonFlags
_TEXT	SEGMENT
printCommonFlags PROC					; COMDAT

; 460  : 	printf
; 461  : 	(
; 462  : 		"Common flags:%s\n", ""
; 463  : 
; 464  : #		ifdef NO_EXTERNAL_DATA
; 465  : 		" NO_EXTERNAL_DATA"
; 466  : #		endif // NO_EXTERNAL_DATA
; 467  : 
; 468  : #		ifdef NO_INTERNAL_DATA
; 469  : 		" NO_INTERNAL_DATA"
; 470  : #		endif // NO_INTERNAL_DATA
; 471  : 
; 472  : #		if !defined(NO_EXTERNAL_DATA)
; 473  : 
; 474  : #		ifdef DATA_FILE
; 475  : 		" DATA=" DATA_FILE
; 476  : #		endif // DATA_FILE
; 477  : 
; 478  : #		ifdef UNSAFE_DATA_LOAD
; 479  : 		" UNSAFE_DATA_LOAD"
; 480  : #		endif // UNSAFE_DATA_LOAD
; 481  : 
; 482  : #		endif // !defined(NO_EXTERNAL_DATA)
; 483  : 
; 484  : #		ifdef USE_MSRPC
; 485  : 		" USE_MSRPC"
; 486  : #		endif // USE_MSRPC
; 487  : 
; 488  : #		ifdef _CRYPTO_OPENSSL
; 489  : 		" _CRYPTO_OPENSSL"
; 490  : #		endif // _CRYPTO_OPENSSL
; 491  : 
; 492  : #		ifdef _CRYPTO_POLARSSL
; 493  : 		" _CRYPTO_POLARSSL"
; 494  : #		endif // _CRYPTO_POLARSSL
; 495  : 
; 496  : #		ifdef _CRYPTO_WINDOWS
; 497  : 		" _CRYPTO_WINDOWS"
; 498  : #		endif // _CRYPTO_WINDOWS
; 499  : 
; 500  : #		if defined(_OPENSSL_SOFTWARE) && defined(_CRYPTO_OPENSSL)
; 501  : 		" _OPENSSL_SOFTWARE"
; 502  : #		endif // _OPENSSL_SOFTWARE
; 503  : 
; 504  : #		if defined(_USE_AES_FROM_OPENSSL) && defined(_CRYPTO_OPENSSL)
; 505  : 		" _USE_AES_FROM_OPENSSL"
; 506  : #		endif // _USE_AES_FROM_OPENSSL
; 507  : 
; 508  : #		if defined(_OPENSSL_NO_HMAC) && defined(_CRYPTO_OPENSSL)
; 509  : 		" OPENSSL_HMAC=0"
; 510  : #		endif // _OPENSSL_NO_HMAC
; 511  : 
; 512  : #		ifdef _PEDANTIC
; 513  : 		" _PEDANTIC"
; 514  : #		endif // _PEDANTIC
; 515  : 
; 516  : #		ifdef INCLUDE_BETAS
; 517  : 		" INCLUDE_BETAS"
; 518  : #		endif // INCLUDE_BETAS
; 519  : 
; 520  : #		if __minix__ || defined(NO_TIMEOUT)
; 521  : 		" NO_TIMEOUT=1"
; 522  : #		endif // __minix__ || defined(NO_TIMEOUT)
; 523  : 	);

  00000	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@NGPJLHEC@?5_CRYPTO_WINDOWS?$AA@
  00007	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@NGBEHLG@Common?5flags?3?$CFs?6?$AA@
  0000e	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_printf
printCommonFlags ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\apple\desktop\vlmcsd\src\output.c
;	COMDAT printServerFlags
_TEXT	SEGMENT
printServerFlags PROC					; COMDAT

; 554  : 	printf
; 555  : 	(
; 556  : 		"vlmcsd flags:%s\n", ""
; 557  : 
; 558  : #		ifdef NO_LOG
; 559  : 		" NO_LOG"
; 560  : #		endif // NO_LOG
; 561  : 
; 562  : #		ifdef NO_RANDOM_EPID
; 563  : 		" NO_RANDOM_EPID"
; 564  : #		endif // NO_RANDOM_EPID
; 565  : 
; 566  : #		ifdef NO_INI_FILE
; 567  : 		" NO_INI_FILE"
; 568  : #		endif // NO_INI_FILE
; 569  : 
; 570  : #		if !defined(NO_INI_FILE) && defined(INI_FILE)
; 571  : 		" INI=" INI_FILE
; 572  : #		endif // !defined(NO_INI_FILE)
; 573  : 
; 574  : #		ifdef NO_PID_FILE
; 575  : 		" NO_PID_FILE"
; 576  : #		endif // NO_PID_FILE
; 577  : 
; 578  : #		ifdef NO_USER_SWITCH
; 579  : 		" NO_USER_SWITCH"
; 580  : #		endif // NO_USER_SWITCH
; 581  : 
; 582  : #		ifdef NO_HELP
; 583  : 		" NO_HELP"
; 584  : #		endif // NO_HELP
; 585  : 
; 586  : #		ifdef NO_STRICT_MODES
; 587  : 		" NO_STRICT_MODES"
; 588  : #		endif // NO_STRICT_MODES
; 589  : 
; 590  : #		ifdef NO_CUSTOM_INTERVALS
; 591  : 		" NO_CUSTOM_INTERVALS"
; 592  : #		endif // NO_CUSTOM_INTERVALS
; 593  : 
; 594  : #		ifdef NO_SOCKETS
; 595  : 		" NO_SOCKETS"
; 596  : #		endif // NO_SOCKETS
; 597  : 
; 598  : #		ifdef NO_CL_PIDS
; 599  : 		" NO_CL_PIDS"
; 600  : #		endif // NO_CL_PIDS
; 601  : 
; 602  : #		ifdef NO_LIMIT
; 603  : 		" NO_LIMIT"
; 604  : #		endif // NO_LIMIT
; 605  : 
; 606  : #		ifdef NO_SIGHUP
; 607  : 		" NO_SIGHUP"
; 608  : #		endif // NO_SIGHUP
; 609  : 
; 610  : #		ifdef NO_PROCFS
; 611  : 		" NOPROCFS=1"
; 612  : #		endif // NO_PROCFS
; 613  : 
; 614  : #		ifdef USE_THREADS
; 615  : 		" THREADS=1"
; 616  : #		endif // USE_THREADS
; 617  : 
; 618  : #		ifdef USE_AUXV
; 619  : 		" AUXV=1"
; 620  : #		endif // USE_AUXV
; 621  : 
; 622  : #		if defined(CHILD_HANDLER) || __minix__
; 623  : 		" CHILD_HANDLER=1"
; 624  : #		endif // defined(CHILD_HANDLER) || __minix__
; 625  : 
; 626  : #		if !defined(NO_SOCKETS) && defined(SIMPLE_SOCKETS)
; 627  : 		" SIMPLE_SOCKETS"
; 628  : #		endif // !defined(NO_SOCKETS) && defined(SIMPLE_SOCKETS)
; 629  : 
; 630  : #		ifdef SIMPLE_RPC
; 631  : 		" SIMPLE_RPC"
; 632  : #		endif // SIMPLE_RPC
; 633  : 
; 634  : #		ifdef NO_STRICT_MODES
; 635  : 		" NO_STRICT_MODES"
; 636  : #		endif // NO_STRICT_MODES
; 637  : 
; 638  : #		ifdef NO_CLIENT_LIST
; 639  : 		" NO_CLIENT_LIST"
; 640  : #		endif // NO_CLIENT_LIST
; 641  : 
; 642  : #		if (_WIN32 || __CYGWIN__) && (!defined(USE_MSRPC) || defined(SUPPORT_WINE))
; 643  : 		" SUPPORT_WINE"
; 644  : #		endif // (_WIN32 || __CYGWIN__) && (!defined(USE_MSRPC) || defined(SUPPORT_WINE))
; 645  : 
; 646  : #		if (_WIN32 || __CYGWIN__) && defined(NO_TAP)
; 647  : 		" NO_TAP"
; 648  : #		endif // (_WIN32 || __CYGWIN__) && defined(NO_TAP)
; 649  : 
; 650  : #		if !HAVE_FREEBIND
; 651  : 		" NO_FREEBIND"
; 652  : #		endif //!HAVE_FREEBIND
; 653  : 
; 654  : #		if !HAVE_GETIFADDR
; 655  : 		" !HAVE_GETIFADDR"
; 656  : #		endif // !HAVE_GETIFADDR
; 657  : 
; 658  : #		if HAVE_GETIFADDR && defined(GETIFADDRS_MUSL)
; 659  : 		" GETIFADDRS=musl"
; 660  : #		endif // HAVE_GETIFADDR && defined(GETIFADDRS_MUSL)
; 661  : 
; 662  : #		if defined(NO_PRIVATE_IP_DETECT)
; 663  : 		" NO_PRIVATE_IP_DETECT"
; 664  : #		endif // defined(NO_PRIVATE_IP_DETECT)
; 665  : 	);

  00000	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@DNHMBJJK@?5NO_SIGHUP?5THREADS?$DN1?5SUPPORT_WIN@
  00007	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@OGOEBGIP@vlmcsd?5flags?3?$CFs?6?$AA@
  0000e	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_printf
printServerFlags ENDP
_TEXT	ENDS
END
