; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

include listing.inc

INCLUDELIB OLDNAMES

EXTRN	__imp_CryptHashData:PROC
EXTRN	__imp_CryptDestroyHash:PROC
EXTRN	__imp_CryptDestroyKey:PROC
EXTRN	__imp_CryptCreateHash:PROC
EXTRN	__imp_CryptImportKey:PROC
EXTRN	__imp_CryptAcquireContextW:PROC
EXTRN	__imp_CryptGetHashParam:PROC
EXTRN	__imp_CryptSetHashParam:PROC
hRsaAesProvider DQ 01H DUP (?)
_BSS	ENDS
PUBLIC	Sha256Hmac
PUBLIC	Sha256
;	COMDAT pdata
pdata	SEGMENT
$pdata$Sha256Hmac DD imagerel $LN12
	DD	imagerel $LN12+406
	DD	imagerel $unwind$Sha256Hmac
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Sha256 DD imagerel $LN11
	DD	imagerel $LN11+227
	DD	imagerel $unwind$Sha256
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AcquireCryptContext DD imagerel AcquireCryptContext
	DD	imagerel AcquireCryptContext+55
	DD	imagerel $unwind$AcquireCryptContext
;	COMDAT xdata
xdata	SEGMENT
$unwind$AcquireCryptContext DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Sha256 DD 081401H
	DD	0c6414H
	DD	0b5414H
	DD	0a3414H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Sha256Hmac DD 0b1f01H
	DD	019741fH
	DD	018641fH
	DD	017341fH
	DD	012011fH
	DD	0c012e014H
	DD	05010H
; Function compile flags: /Ogspy
; File c:\users\apple\desktop\vlmcsd\src\crypto_windows.c
;	COMDAT AcquireCryptContext
_TEXT	SEGMENT
AcquireCryptContext PROC				; COMDAT

; 39   : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 40   : 	if (!hRsaAesProvider)

  00004	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR hRsaAesProvider, 0
  0000c	75 22		 jne	 SHORT $LN1@AcquireCry

; 41   : 	{
; 42   : 		return (int_fast8_t)CryptAcquireContextW
; 43   : 		(
; 44   : 			&hRsaAesProvider,		// Provider handle
; 45   : 			NULL,					// No key container name
; 46   : 			NULL,					// Default provider
; 47   : 			PROV_RSA_AES,			// Provides SHA and AES
; 48   : 			CRYPT_VERIFYCONTEXT		// We don't need access to persistent keys
; 49   : 		);

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:hRsaAesProvider
  00015	41 b9 18 00 00
	00		 mov	 r9d, 24
  0001b	45 33 c0	 xor	 r8d, r8d
  0001e	33 d2		 xor	 edx, edx
  00020	c7 44 24 20 00
	00 00 f0	 mov	 DWORD PTR [rsp+32], -268435456 ; f0000000H
  00028	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CryptAcquireContextW
  0002e	eb 02		 jmp	 SHORT $LN2@AcquireCry
$LN1@AcquireCry:

; 50   : 	}
; 51   : 
; 52   : 	return TRUE;

  00030	b0 01		 mov	 al, 1
$LN2@AcquireCry:

; 53   : }

  00032	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00036	c3		 ret	 0
AcquireCryptContext ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\apple\desktop\vlmcsd\src\crypto_windows.c
;	COMDAT Sha256
_TEXT	SEGMENT
hHash$ = 48
data$ = 80
DataSize$ = 88
hash$ = 96
HashSize$ = 104
Sha256	PROC						; COMDAT

; 57   : {

$LN11:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp
  0000b	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 58   : 	HCRYPTHASH hHash = 0;

  00014	48 83 60 e8 00	 and	 QWORD PTR [rax-24], 0
  00019	48 8b e9	 mov	 rbp, rcx

; 59   : 	DWORD HashSize = 32;
; 60   : 
; 61   : 	int_fast8_t success =
; 62   : 		AcquireCryptContext() &&
; 63   : 
; 64   : 		CryptCreateHash
; 65   : 		(
; 66   : 			hRsaAesProvider,// Provider handle
; 67   : 			CALG_SHA_256,	// Algorithm
; 68   : 			NULLHANDLE,		// SHA256 requires no key
; 69   : 			NULLFLAGS,		// Use default flags
; 70   : 			&hHash			// Handle for hashing
; 71   : 		) &&
; 72   : 
; 73   : 		CryptHashData
; 74   : 		(
; 75   : 			hHash,			// Handle
; 76   : 			data,			// data to hash
; 77   : 			DataSize,		// size of data
; 78   : 			NULLFLAGS		// Use default flags
; 79   : 		) &&
; 80   : 
; 81   : 		CryptGetHashParam
; 82   : 		(
; 83   : 			hHash,			// Handle
; 84   : 			HP_HASHVAL,		// what you actually want to get (the resulting hash)
; 85   : 			hash,			// data to retrieve
; 86   : 			&HashSize,		// size of data
; 87   : 			NULLFLAGS		// currently reserved (as of this writing)
; 88   : 		);

  0001c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR hRsaAesProvider
  00023	49 8b f8	 mov	 rdi, r8
  00026	8b f2		 mov	 esi, edx
  00028	c7 40 20 20 00
	00 00		 mov	 DWORD PTR [rax+32], 32	; 00000020H
  0002f	b3 01		 mov	 bl, 1
  00031	48 85 c9	 test	 rcx, rcx
  00034	75 26		 jne	 SHORT $LN6@Sha256
  00036	44 8d 49 18	 lea	 r9d, QWORD PTR [rcx+24]
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:hRsaAesProvider
  00041	45 33 c0	 xor	 r8d, r8d
  00044	33 d2		 xor	 edx, edx
  00046	c7 40 d8 00 00
	00 f0		 mov	 DWORD PTR [rax-40], -268435456 ; f0000000H
  0004d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CryptAcquireContextW
  00053	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR hRsaAesProvider
  0005a	eb 02		 jmp	 SHORT $LN7@Sha256
$LN6@Sha256:
  0005c	8a c3		 mov	 al, bl
$LN7@Sha256:
  0005e	84 c0		 test	 al, al
  00060	74 58		 je	 SHORT $LN9@Sha256
  00062	48 8d 44 24 30	 lea	 rax, QWORD PTR hHash$[rsp]
  00067	45 33 c9	 xor	 r9d, r9d
  0006a	45 33 c0	 xor	 r8d, r8d
  0006d	ba 0c 80 00 00	 mov	 edx, 32780		; 0000800cH
  00072	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00077	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CryptCreateHash
  0007d	85 c0		 test	 eax, eax
  0007f	74 39		 je	 SHORT $LN9@Sha256
  00081	48 8b 4c 24 30	 mov	 rcx, QWORD PTR hHash$[rsp]
  00086	45 33 c9	 xor	 r9d, r9d
  00089	44 8b c6	 mov	 r8d, esi
  0008c	48 8b d5	 mov	 rdx, rbp
  0008f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CryptHashData
  00095	85 c0		 test	 eax, eax
  00097	74 21		 je	 SHORT $LN9@Sha256
  00099	48 8b 4c 24 30	 mov	 rcx, QWORD PTR hHash$[rsp]
  0009e	83 64 24 20 00	 and	 DWORD PTR [rsp+32], 0
  000a3	4c 8d 4c 24 68	 lea	 r9, QWORD PTR HashSize$[rsp]
  000a8	4c 8b c7	 mov	 r8, rdi
  000ab	ba 02 00 00 00	 mov	 edx, 2
  000b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CryptGetHashParam
  000b6	85 c0		 test	 eax, eax
  000b8	75 02		 jne	 SHORT $LN5@Sha256
$LN9@Sha256:
  000ba	32 db		 xor	 bl, bl
$LN5@Sha256:

; 89   : 
; 90   : 	if (hHash) CryptDestroyHash(hHash);

  000bc	48 8b 4c 24 30	 mov	 rcx, QWORD PTR hHash$[rsp]
  000c1	48 85 c9	 test	 rcx, rcx
  000c4	74 06		 je	 SHORT $LN1@Sha256
  000c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CryptDestroyHash
$LN1@Sha256:

; 91   : 
; 92   : 	return success;
; 93   : }

  000cc	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  000d1	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  000d6	8a c3		 mov	 al, bl
  000d8	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000dd	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000e1	5f		 pop	 rdi
  000e2	c3		 ret	 0
Sha256	ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\apple\desktop\vlmcsd\src\crypto_windows.c
;	COMDAT Sha256Hmac
_TEXT	SEGMENT
hHmacHash$ = 48
hKey$ = 56
hmackeyblob$ = 64
HmacInfo$ = 96
dwHmacSize$ = 176
key$ = 176
data$ = 184
len$ = 192
hmac$ = 200
Sha256Hmac PROC						; COMDAT

; 97   : {

$LN12:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 10	 mov	 QWORD PTR [rax+16], rbx
  00007	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
  0000b	48 89 78 20	 mov	 QWORD PTR [rax+32], rdi
  0000f	55		 push	 rbp
  00010	41 54		 push	 r12
  00012	41 56		 push	 r14
  00014	48 8d 68 a1	 lea	 rbp, QWORD PTR [rax-95]
  00018	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H

; 98   : #	ifndef USE_THREADS // In fork() mode thread-safety is not required
; 99   : 	static
; 100  : #	endif
; 101  : 	HMAC_KEYBLOB hmackeyblob = {
; 102  : 		// Type, Version, Algorithm
; 103  : 		{ PLAINTEXTKEYBLOB, CUR_BLOB_VERSION, 0, CALG_RC2 },
; 104  : 		// Key length
; 105  : 		16
; 106  : 	};

  0001f	45 33 e4	 xor	 r12d, r12d
  00022	33 c0		 xor	 eax, eax
  00024	41 8b f0	 mov	 esi, r8d
  00027	48 8b d9	 mov	 rbx, rcx
  0002a	4c 8b f2	 mov	 r14, rdx

; 107  : 
; 108  : 	HCRYPTKEY hKey = NULLHANDLE;
; 109  : 	HCRYPTHASH hHmacHash = NULLHANDLE;
; 110  : 	HMAC_INFO HmacInfo = { 0 };

  0002d	45 8d 44 24 20	 lea	 r8d, QWORD PTR [r12+32]
  00032	48 8d 4d 1f	 lea	 rcx, QWORD PTR HmacInfo$[rbp-65]
  00036	33 d2		 xor	 edx, edx
  00038	49 8b f9	 mov	 rdi, r9
  0003b	c7 45 f7 08 02
	00 00		 mov	 DWORD PTR hmackeyblob$[rbp-73], 520 ; 00000208H
  00042	c7 45 fb 02 66
	00 00		 mov	 DWORD PTR hmackeyblob$[rbp-69], 26114 ; 00006602H
  00049	c7 45 ff 10 00
	00 00		 mov	 DWORD PTR hmackeyblob$[rbp-65], 16
  00050	48 89 45 03	 mov	 QWORD PTR hmackeyblob$[rbp-61], rax
  00054	48 89 45 0b	 mov	 QWORD PTR hmackeyblob$[rbp-53], rax
  00058	4c 89 65 ef	 mov	 QWORD PTR hKey$[rbp-73], r12
  0005c	4c 89 65 e7	 mov	 QWORD PTR hHmacHash$[rbp-73], r12
  00060	e8 00 00 00 00	 call	 memset

; 111  : 	DWORD dwHmacSize = 32;
; 112  : 
; 113  : 	HmacInfo.HashAlgid = CALG_SHA_256;
; 114  : 	memcpy(hmackeyblob.KeyData, key, sizeof(hmackeyblob.KeyData));
; 115  : 
; 116  : 	BOOL success =
; 117  : 		AcquireCryptContext() &&
; 118  : 
; 119  : 		CryptImportKey
; 120  : 		(
; 121  : 			hRsaAesProvider,        // provider handle
; 122  : 			(PBYTE)&hmackeyblob,    // the actual key MS blob format
; 123  : 			sizeof(HMAC_KEYBLOB),   // size of the entire blob
; 124  : 			NULLHANDLE,             // password/key for the key store (none required here)
; 125  : 			NULLFLAGS,              // default flags
; 126  : 			&hKey                   // key handle to retrieve (must be kept until you finish hashing)
; 127  : 		) &&
; 128  : 
; 129  : 		CryptCreateHash
; 130  : 		(
; 131  : 			hRsaAesProvider,        // provider handle
; 132  : 			CALG_HMAC,              // the actual key MS blob format
; 133  : 			hKey,                   // size of the entire blob
; 134  : 			NULLFLAGS,              // password/key for the key store (none required here)
; 135  : 			&hHmacHash              // default flags
; 136  : 		) &&                        // key handle to retrieve (must be kept until you finish hashing)
; 137  : 
; 138  : 		CryptSetHashParam
; 139  : 		(
; 140  : 			hHmacHash,              // hash handle
; 141  : 			HP_HMAC_INFO,           // parameter you want to set
; 142  : 			(PBYTE)&HmacInfo,       // the HMAC parameters (SHA256 with default ipad and opad)
; 143  : 			NULLFLAGS               // flags are reserved up to Windows 8.1
; 144  : 		) &&
; 145  : 
; 146  : 		CryptHashData
; 147  : 		(
; 148  : 			hHmacHash,              // hash handle
; 149  : 			data,                   // Pointer to data you want to hash
; 150  : 			len,                    // data length
; 151  : 			NULLFLAGS               // default flags
; 152  : 		) &&
; 153  : 
; 154  : 		CryptGetHashParam
; 155  : 		(
; 156  : 			hHmacHash,              // hash handle
; 157  : 			HP_HASHVAL,             // what you actually want to get (the resulting HMAC)
; 158  : 			hmac,                   // data to retrieve
; 159  : 			&dwHmacSize,            // size of data
; 160  : 			NULLFLAGS               // currently reserved (as of this writing)
; 161  : 		);

  00065	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR hRsaAesProvider
  0006c	0f 10 03	 movups	 xmm0, XMMWORD PTR [rbx]
  0006f	c7 45 67 20 00
	00 00		 mov	 DWORD PTR dwHmacSize$[rbp-73], 32 ; 00000020H
  00076	c7 45 17 0c 80
	00 00		 mov	 DWORD PTR HmacInfo$[rbp-73], 32780 ; 0000800cH
  0007d	41 8d 5c 24 01	 lea	 ebx, QWORD PTR [r12+1]
  00082	f3 0f 7f 45 03	 movdqu	 XMMWORD PTR hmackeyblob$[rbp-61], xmm0
  00087	48 85 c9	 test	 rcx, rcx
  0008a	75 28		 jne	 SHORT $LN7@Sha256Hmac
  0008c	45 8d 4c 24 18	 lea	 r9d, QWORD PTR [r12+24]
  00091	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:hRsaAesProvider
  00098	45 33 c0	 xor	 r8d, r8d
  0009b	33 d2		 xor	 edx, edx
  0009d	c7 44 24 20 00
	00 00 f0	 mov	 DWORD PTR [rsp+32], -268435456 ; f0000000H
  000a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CryptAcquireContextW
  000ab	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR hRsaAesProvider
  000b2	eb 02		 jmp	 SHORT $LN8@Sha256Hmac
$LN7@Sha256Hmac:
  000b4	8a c3		 mov	 al, bl
$LN8@Sha256Hmac:
  000b6	84 c0		 test	 al, al
  000b8	0f 84 98 00 00
	00		 je	 $LN10@Sha256Hmac
  000be	45 33 c9	 xor	 r9d, r9d
  000c1	48 8d 45 ef	 lea	 rax, QWORD PTR hKey$[rbp-73]
  000c5	48 8d 55 f7	 lea	 rdx, QWORD PTR hmackeyblob$[rbp-73]
  000c9	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000ce	45 8d 41 1c	 lea	 r8d, QWORD PTR [r9+28]
  000d2	44 89 64 24 20	 mov	 DWORD PTR [rsp+32], r12d
  000d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CryptImportKey
  000dd	85 c0		 test	 eax, eax
  000df	74 75		 je	 SHORT $LN10@Sha256Hmac
  000e1	4c 8b 45 ef	 mov	 r8, QWORD PTR hKey$[rbp-73]
  000e5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR hRsaAesProvider
  000ec	48 8d 45 e7	 lea	 rax, QWORD PTR hHmacHash$[rbp-73]
  000f0	45 33 c9	 xor	 r9d, r9d
  000f3	ba 09 80 00 00	 mov	 edx, 32777		; 00008009H
  000f8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CryptCreateHash
  00103	85 c0		 test	 eax, eax
  00105	74 4f		 je	 SHORT $LN10@Sha256Hmac
  00107	48 8b 4d e7	 mov	 rcx, QWORD PTR hHmacHash$[rbp-73]
  0010b	45 33 c9	 xor	 r9d, r9d
  0010e	4c 8d 45 17	 lea	 r8, QWORD PTR HmacInfo$[rbp-73]
  00112	41 8d 51 05	 lea	 edx, QWORD PTR [r9+5]
  00116	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CryptSetHashParam
  0011c	85 c0		 test	 eax, eax
  0011e	74 36		 je	 SHORT $LN10@Sha256Hmac
  00120	48 8b 4d e7	 mov	 rcx, QWORD PTR hHmacHash$[rbp-73]
  00124	45 33 c9	 xor	 r9d, r9d
  00127	44 8b c6	 mov	 r8d, esi
  0012a	49 8b d6	 mov	 rdx, r14
  0012d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CryptHashData
  00133	85 c0		 test	 eax, eax
  00135	74 1f		 je	 SHORT $LN10@Sha256Hmac
  00137	48 8b 4d e7	 mov	 rcx, QWORD PTR hHmacHash$[rbp-73]
  0013b	4c 8d 4d 67	 lea	 r9, QWORD PTR dwHmacSize$[rbp-73]
  0013f	4c 8b c7	 mov	 r8, rdi
  00142	ba 02 00 00 00	 mov	 edx, 2
  00147	44 89 64 24 20	 mov	 DWORD PTR [rsp+32], r12d
  0014c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CryptGetHashParam
  00152	85 c0		 test	 eax, eax
  00154	75 03		 jne	 SHORT $LN6@Sha256Hmac
$LN10@Sha256Hmac:
  00156	41 8b dc	 mov	 ebx, r12d
$LN6@Sha256Hmac:

; 162  : 
; 163  : 	if (hKey) CryptDestroyKey(hKey);

  00159	48 8b 4d ef	 mov	 rcx, QWORD PTR hKey$[rbp-73]
  0015d	48 85 c9	 test	 rcx, rcx
  00160	74 06		 je	 SHORT $LN2@Sha256Hmac
  00162	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CryptDestroyKey
$LN2@Sha256Hmac:

; 164  : 	if (hHmacHash) CryptDestroyHash(hHmacHash);

  00168	48 8b 4d e7	 mov	 rcx, QWORD PTR hHmacHash$[rbp-73]
  0016c	48 85 c9	 test	 rcx, rcx
  0016f	74 06		 je	 SHORT $LN1@Sha256Hmac
  00171	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CryptDestroyHash
$LN1@Sha256Hmac:

; 165  : 
; 166  : 	return (int_fast8_t)success;
; 167  : }

  00177	4c 8d 9c 24 90
	00 00 00	 lea	 r11, QWORD PTR [rsp+144]
  0017f	8a c3		 mov	 al, bl
  00181	49 8b 5b 28	 mov	 rbx, QWORD PTR [r11+40]
  00185	49 8b 73 30	 mov	 rsi, QWORD PTR [r11+48]
  00189	49 8b 7b 38	 mov	 rdi, QWORD PTR [r11+56]
  0018d	49 8b e3	 mov	 rsp, r11
  00190	41 5e		 pop	 r14
  00192	41 5c		 pop	 r12
  00194	5d		 pop	 rbp
  00195	c3		 ret	 0
Sha256Hmac ENDP
_TEXT	ENDS
END
