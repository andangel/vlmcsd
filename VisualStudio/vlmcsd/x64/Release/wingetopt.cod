; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	optind
PUBLIC	opterr
PUBLIC	??_C@_02BAABKJLB@?9?9?$AA@			; `string'
COMM	optarg:QWORD
COMM	optopt:DWORD
_DATA	ENDS
;	COMDAT ??_C@_02BAABKJLB@?9?9?$AA@
CONST	SEGMENT
??_C@_02BAABKJLB@?9?9?$AA@ DB '--', 00H			; `string'
optind	DD	01H
opterr	DD	01H
?sp@?1??getopt@@9@9 DD 01H				; `getopt'::`2'::sp
PUBLIC	getopt
;	COMDAT pdata
pdata	SEGMENT
$pdata$getopt DD imagerel $LN22
	DD	imagerel $LN22+402
	DD	imagerel $unwind$getopt
;	COMDAT xdata
xdata	SEGMENT
$unwind$getopt DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogspy
; File c:\users\apple\desktop\vlmcsd\src\wingetopt.c
;	COMDAT getopt
_TEXT	SEGMENT
argc$dead$ = 48
argv$dead$ = 56
opts$dead$ = 64
getopt	PROC						; COMDAT

; 33   : {

$LN22:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 34   : 	static int sp = 1;
; 35   : 	register int c;
; 36   : 	register char *cp;
; 37   : 
; 38   : 	if (sp == 1)

  00014	4c 63 05 00 00
	00 00		 movsxd	 r8, DWORD PTR ?sp@?1??getopt@@9@9
  0001b	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR global_argv
  00022	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR global_argc
  00028	48 63 15 00 00
	00 00		 movsxd	 rdx, DWORD PTR optind
  0002f	bd 01 00 00 00	 mov	 ebp, 1
  00034	44 3b c5	 cmp	 r8d, ebp
  00037	75 43		 jne	 SHORT $LN11@getopt

; 39   : 		if (optind >= argc ||
; 40   : 			argv[optind][0] != '-' || argv[optind][1] == '\0')

  00039	3b d6		 cmp	 edx, esi
  0003b	7d 37		 jge	 SHORT $LN13@getopt
  0003d	48 8b 0c d3	 mov	 rcx, QWORD PTR [rbx+rdx*8]
  00041	80 39 2d	 cmp	 BYTE PTR [rcx], 45	; 0000002dH
  00044	75 2e		 jne	 SHORT $LN13@getopt
  00046	80 79 01 00	 cmp	 BYTE PTR [rcx+1], 0
  0004a	74 28		 je	 SHORT $LN13@getopt

; 42   : 		else if (strcmp(argv[optind], "--") == 0) {

  0004c	8a 01		 mov	 al, BYTE PTR [rcx]
  0004e	3a 05 00 00 00
	00		 cmp	 al, BYTE PTR ??_C@_02BAABKJLB@?9?9?$AA@
  00054	75 26		 jne	 SHORT $LN11@getopt
  00056	8a 41 01	 mov	 al, BYTE PTR [rcx+1]
  00059	3a 05 01 00 00
	00		 cmp	 al, BYTE PTR ??_C@_02BAABKJLB@?9?9?$AA@+1
  0005f	75 1b		 jne	 SHORT $LN11@getopt
  00061	8a 41 02	 mov	 al, BYTE PTR [rcx+2]
  00064	3a 05 02 00 00
	00		 cmp	 al, BYTE PTR ??_C@_02BAABKJLB@?9?9?$AA@+2
  0006a	75 10		 jne	 SHORT $LN11@getopt

; 43   : 			optind++;

  0006c	03 d5		 add	 edx, ebp
  0006e	89 15 00 00 00
	00		 mov	 DWORD PTR optind, edx
$LN13@getopt:

; 41   : 			return(EOF);

  00074	83 c8 ff	 or	 eax, -1
  00077	e9 01 01 00 00	 jmp	 $LN16@getopt
$LN11@getopt:

; 44   : 			return(EOF);
; 45   : 		}
; 46   : 		optopt = c = argv[optind][sp];

  0007c	48 8b 04 d3	 mov	 rax, QWORD PTR [rbx+rdx*8]
  00080	42 0f be 3c 00	 movsx	 edi, BYTE PTR [rax+r8]
  00085	89 3d 00 00 00
	00		 mov	 DWORD PTR optopt, edi

; 47   : 		if (c == ':' || (cp = strchr(opts, c)) == NULL) {

  0008b	83 ff 3a	 cmp	 edi, 58			; 0000003aH
  0008e	0f 84 bc 00 00
	00		 je	 $LN9@getopt
  00094	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EN@OAFFBID@N?3B?3m?3t?3w?30?33?36?3H?3A?3R?3u?3G?3g?3L?3p?3@
  0009b	8b d7		 mov	 edx, edi
  0009d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  000a3	48 85 c0	 test	 rax, rax
  000a6	0f 84 97 00 00
	00		 je	 $LN18@getopt

; 54   : 		}
; 55   : 		if (*++cp == ':') {

  000ac	80 78 01 3a	 cmp	 BYTE PTR [rax+1], 58	; 0000003aH
  000b0	75 53		 jne	 SHORT $LN7@getopt

; 56   : 			if (argv[optind][sp + 1] != '\0')

  000b2	48 63 15 00 00
	00 00		 movsxd	 rdx, DWORD PTR optind
  000b9	48 63 0d 00 00
	00 00		 movsxd	 rcx, DWORD PTR ?sp@?1??getopt@@9@9
  000c0	4c 8b 04 d3	 mov	 r8, QWORD PTR [rbx+rdx*8]
  000c4	42 80 7c 01 01
	00		 cmp	 BYTE PTR [rcx+r8+1], 0
  000ca	74 0b		 je	 SHORT $LN6@getopt

; 57   : 				optarg = (char*)&argv[optind++][sp + 1];

  000cc	8d 41 01	 lea	 eax, DWORD PTR [rcx+1]
  000cf	48 63 c8	 movsxd	 rcx, eax
  000d2	49 03 c8	 add	 rcx, r8
  000d5	eb 17		 jmp	 SHORT $LN19@getopt
$LN6@getopt:

; 58   : 			else if (++optind >= argc) {

  000d7	03 d5		 add	 edx, ebp
  000d9	89 15 00 00 00
	00		 mov	 DWORD PTR optind, edx
  000df	3b d6		 cmp	 edx, esi
  000e1	0f 8d 8b 00 00
	00		 jge	 $LN20@getopt

; 59   : 				//ERR(": option requires an argument -- ", (char)c);
; 60   : 				sp = 1;
; 61   : 				return('?');
; 62   : 			}
; 63   : 			else
; 64   : 				optarg = (char*)argv[optind++];

  000e7	48 63 c2	 movsxd	 rax, edx
  000ea	48 8b 0c c3	 mov	 rcx, QWORD PTR [rbx+rax*8]
$LN19@getopt:
  000ee	03 d5		 add	 edx, ebp
  000f0	48 89 0d 00 00
	00 00		 mov	 QWORD PTR optarg, rcx

; 65   : 			sp = 1;

  000f7	89 2d 00 00 00
	00		 mov	 DWORD PTR ?sp@?1??getopt@@9@9, ebp
  000fd	89 15 00 00 00
	00		 mov	 DWORD PTR optind, edx

; 66   : 		}
; 67   : 		else {

  00103	eb 3a		 jmp	 SHORT $LN2@getopt
$LN7@getopt:

; 68   : 			if (argv[optind][++sp] == '\0') {

  00105	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?sp@?1??getopt@@9@9
  0010b	4c 63 05 00 00
	00 00		 movsxd	 r8, DWORD PTR optind
  00112	4a 8b 0c c3	 mov	 rcx, QWORD PTR [rbx+r8*8]
  00116	03 d5		 add	 edx, ebp
  00118	89 15 00 00 00
	00		 mov	 DWORD PTR ?sp@?1??getopt@@9@9, edx
  0011e	48 63 d2	 movsxd	 rdx, edx
  00121	80 3c 0a 00	 cmp	 BYTE PTR [rdx+rcx], 0
  00125	75 10		 jne	 SHORT $LN1@getopt

; 69   : 				sp = 1;
; 70   : 				optind++;

  00127	44 03 c5	 add	 r8d, ebp
  0012a	89 2d 00 00 00
	00		 mov	 DWORD PTR ?sp@?1??getopt@@9@9, ebp
  00130	44 89 05 00 00
	00 00		 mov	 DWORD PTR optind, r8d
$LN1@getopt:

; 71   : 			}
; 72   : 			optarg = NULL;

  00137	48 83 25 00 00
	00 00 00	 and	 QWORD PTR optarg, 0
$LN2@getopt:

; 73   : 		}
; 74   : 		return(c);

  0013f	8b c7		 mov	 eax, edi
  00141	eb 3a		 jmp	 SHORT $LN16@getopt
$LN18@getopt:
  00143	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR ?sp@?1??getopt@@9@9
  0014a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR optind
$LN9@getopt:

; 48   : 			//ERR(": illegal option -- ", (char)c);
; 49   : 			if (argv[optind][++sp] == '\0') {

  00150	44 03 c5	 add	 r8d, ebp
  00153	48 63 c2	 movsxd	 rax, edx
  00156	48 8b 04 c3	 mov	 rax, QWORD PTR [rbx+rax*8]
  0015a	49 63 c8	 movsxd	 rcx, r8d
  0015d	44 89 05 00 00
	00 00		 mov	 DWORD PTR ?sp@?1??getopt@@9@9, r8d
  00164	80 3c 01 00	 cmp	 BYTE PTR [rcx+rax], 0
  00168	75 0e		 jne	 SHORT $LN8@getopt

; 50   : 				optind++;

  0016a	03 d5		 add	 edx, ebp
  0016c	89 15 00 00 00
	00		 mov	 DWORD PTR optind, edx
$LN20@getopt:

; 51   : 				sp = 1;

  00172	89 2d 00 00 00
	00		 mov	 DWORD PTR ?sp@?1??getopt@@9@9, ebp
$LN8@getopt:

; 52   : 			}
; 53   : 			return('?');

  00178	b8 3f 00 00 00	 mov	 eax, 63			; 0000003fH
$LN16@getopt:

; 75   : }

  0017d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00182	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00187	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0018c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00190	5f		 pop	 rdi
  00191	c3		 ret	 0
getopt	ENDP
_TEXT	ENDS
END
