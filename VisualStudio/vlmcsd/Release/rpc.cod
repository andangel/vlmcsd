; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\Dell\Desktop\vlmcsd\src\rpc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0CA@BBMKAOPO@Fatal?3?5KMSv?$CFhu?4?$CFhu?5unsupported?6?$AA@ ; `string'
PUBLIC	??_C@_0DP@CJEHLGPD@Fatal?3?5Received?5wrong?5RPC?5packet@ ; `string'
PUBLIC	??_C@_0FA@EFGNKFML@Fatal?3?5RPC?5response?5does?5not?5con@ ; `string'
PUBLIC	??_C@_0CN@JIFMCEFK@Fatal?3?5RPC?5response?5requests?5aut@ ; `string'
PUBLIC	??_C@_0EI@BKAOLKDE@Fatal?3?5RPC?5packet?5flags?5RPC_PF_F@ ; `string'
PUBLIC	??_C@_0BG@HLJBDNGA@RPC_PF_CANCEL_PENDING?$AA@	; `string'
PUBLIC	??_C@_0BP@EPFAGCLK@Warning?3?5?$CFs?5should?5not?5be?5set?6?$AA@ ; `string'
PUBLIC	??_C@_0BA@LFBPBNOH@RPC_PF_RESERVED?$AA@		; `string'
PUBLIC	??_C@_0BA@HEJPAFFP@RPC_PF_NOT_EXEC?$AA@		; `string'
PUBLIC	??_C@_0N@HEOOBKKP@RPC_PF_MAYBE?$AA@		; `string'
PUBLIC	??_C@_0O@DHNLACON@RPC_PF_OBJECT?$AA@		; `string'
PUBLIC	??_C@_0CP@HOOBBENO@Fatal?3?5Expected?5RPC?5version?55?40?5@ ; `string'
PUBLIC	??_C@_0EE@GLJICDBO@Warning?3?5RPC_PF_MULTIPLEX?5of?5RPC@ ; `string'
PUBLIC	??_C@_0BB@MIHFLBDG@RPC_PF_MULTIPLEX?$AA@	; `string'
PUBLIC	??_C@_0EG@HDABALOO@Warning?3?5Buggy?5RPC?5of?5Wine?5detec@ ; `string'
PUBLIC	??_C@_0DL@NKMJHEP@Fatal?3?5Sent?5Call?5Id?5?$CFu?5but?5recei@ ; `string'
PUBLIC	??_C@_0CE@JLEJBEGP@?6Fatal?3?5Could?5not?5send?5RPC?5reque@ ; `string'
PUBLIC	??_C@_0CO@NNOGDDAG@?6Fatal?3?5No?5RPC?5response?5received@ ; `string'
PUBLIC	??_C@_0CE@ENNHKCJO@?6Fatal?3?5RPC?5response?5is?5incomple@ ; `string'
PUBLIC	??_C@_0CM@HKIEGAIN@?6Fatal?3?5RPC?5response?5cancel?5coun@ ; `string'
PUBLIC	??_C@_0DB@LCKBGPNI@?6Fatal?3?5RPC?5response?5context?5id?5@ ; `string'
PUBLIC	??_C@_0EA@FIBHBLDN@?6Fatal?3?5NDR?5data?5length?5?$CI?$CFu?$CJ?5doe@ ; `string'
PUBLIC	??_C@_0FD@KCALNIFM@?6Fatal?3?5No?5or?5incomplete?5KMS?5res@ ; `string'
PUBLIC	??_C@_0EK@EDAGGGNP@?6Warning?3?5RPC?5stub?5size?5is?5?$CFu?0?5s@ ; `string'
PUBLIC	??_C@_0EN@IFHPELIC@?6Warning?3?5RPC?5stub?5data?5not?5padd@ ; `string'
PUBLIC	??_C@_0CJ@ELGOCPLL@?6Fatal?3?5Sending?5RPC?5bind?5request@ ; `string'
PUBLIC	??_C@_0DA@NCIGIHDA@?6Fatal?3?5Did?5not?5receive?5a?5respon@ ; `string'
PUBLIC	??_C@_0DG@CDFCGJFH@?6Fatal?3?5Incomplete?5RPC?5bind?5ackn@ ; `string'
PUBLIC	??_C@_0CK@HPNJNCNH@?6Fatal?3?5Expected?5?$CFu?5CTX?5items?5bu@ ; `string'
PUBLIC	??_C@_04EFGMAIMH@BTFN?$AA@			; `string'
PUBLIC	??_C@_05CMNEGGDF@NDR64?$AA@			; `string'
PUBLIC	??_C@_05HMEFADFI@NDR32?$AA@			; `string'
PUBLIC	??_C@_0EA@FALBNLMF@?6Warning?3?5Rejected?5transfer?5synt@ ; `string'
PUBLIC	??_C@_0EO@LKGEJEDI@?6Warning?3?5Rejected?5transfer?5synt@ ; `string'
PUBLIC	??_C@_0DO@PHEPNPBJ@?6Warning?3?5Transfer?5syntax?5?$CFs?5doe@ ; `string'
PUBLIC	??_C@_0FI@PEIELJGO@?6Warning?3?5Rejected?5transfer?5synt@ ; `string'
PUBLIC	??_C@_0ED@ONOBBCGN@?6Warning?3?5BTFN?5did?5not?5respond?5w@ ; `string'
PUBLIC	??_C@_0EC@EDPPOAMK@?6Warning?3?5BTFN?5did?5not?5return?5ex@ ; `string'
PUBLIC	??_C@_09PKGPPFMG@?4?4?4?5BTFN?5?$AA@		; `string'
PUBLIC	??_C@_0GC@NGOEMPDA@?6Fatal?3?5transfer?5syntax?5?$CFs?5retur@ ; `string'
PUBLIC	??_C@_0EJ@PGIIMLOK@?6Fatal?3?5Transfer?5syntax?5of?5RPC?5b@ ; `string'
PUBLIC	??_C@_0DP@BHGLCOFK@?6Fatal?3?5Expected?5transfer?5syntax@ ; `string'
PUBLIC	??_C@_0CM@HGMDMAM@?6Warning?3?5Ack?5reason?5should?5be?50@ ; `string'
PUBLIC	??_C@_0L@DMLPGKA@?4?4?4?5NDR64?5?$AA@		; `string'
PUBLIC	??_C@_0L@DAJIHKCA@?4?4?4?5NDR32?5?$AA@		; `string'
PUBLIC	??_C@_0EF@PFAMEHMF@?6Fatal?3?5Could?5neither?5negotiate?5@ ; `string'
EXTRN	__imp__getsockname@12:PROC
?WineBugDetected@?1??checkRpcResponseHeader@@9@9 DB 01H DUP (?) ; `checkRpcResponseHeader'::`2'::WineBugDetected
COMM	_RpcFlags:DWORD
_DATA	ENDS
;	COMDAT ??_C@_0EF@PFAMEHMF@?6Fatal?3?5Could?5neither?5negotiate?5@
CONST	SEGMENT
??_C@_0EF@PFAMEHMF@?6Fatal?3?5Could?5neither?5negotiate?5@ DB 0aH, 'Fatal'
	DB	': Could neither negotiate NDR32 nor NDR64 with the RPC server'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DAJIHKCA@?4?4?4?5NDR32?5?$AA@
CONST	SEGMENT
??_C@_0L@DAJIHKCA@?4?4?4?5NDR32?5?$AA@ DB '... NDR32 ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DMLPGKA@?4?4?4?5NDR64?5?$AA@
CONST	SEGMENT
??_C@_0L@DMLPGKA@?4?4?4?5NDR64?5?$AA@ DB '... NDR64 ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@HGMDMAM@?6Warning?3?5Ack?5reason?5should?5be?50@
CONST	SEGMENT
??_C@_0CM@HGMDMAM@?6Warning?3?5Ack?5reason?5should?5be?50@ DB 0aH, 'Warni'
	DB	'ng: Ack reason should be 0 but is %u', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@BHGLCOFK@?6Fatal?3?5Expected?5transfer?5syntax@
CONST	SEGMENT
??_C@_0DP@BHGLCOFK@?6Fatal?3?5Expected?5transfer?5syntax@ DB 0aH, 'Fatal:'
	DB	' Expected transfer syntax version %u for %s but got %u', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@PGIIMLOK@?6Fatal?3?5Transfer?5syntax?5of?5RPC?5b@
CONST	SEGMENT
??_C@_0EJ@PGIIMLOK@?6Fatal?3?5Transfer?5syntax?5of?5RPC?5b@ DB 0aH, 'Fata'
	DB	'l: Transfer syntax of RPC bind request and response does not '
	DB	'match', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@NGOEMPDA@?6Fatal?3?5transfer?5syntax?5?$CFs?5retur@
CONST	SEGMENT
??_C@_0GC@NGOEMPDA@?6Fatal?3?5transfer?5syntax?5?$CFs?5retur@ DB 0aH, 'Fa'
	DB	'tal: transfer syntax %s returned an invalid status, neither R'
	DB	'PC_BIND_ACCEPT nor RPC_BIND_NACK', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PKGPPFMG@?4?4?4?5BTFN?5?$AA@
CONST	SEGMENT
??_C@_09PKGPPFMG@?4?4?4?5BTFN?5?$AA@ DB '... BTFN ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@EDPPOAMK@?6Warning?3?5BTFN?5did?5not?5return?5ex@
CONST	SEGMENT
??_C@_0EC@EDPPOAMK@?6Warning?3?5BTFN?5did?5not?5return?5ex@ DB 0aH, 'Warn'
	DB	'ing: BTFN did not return expected feature mask 0x3 but 0x%X', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@ONOBBCGN@?6Warning?3?5BTFN?5did?5not?5respond?5w@
CONST	SEGMENT
??_C@_0ED@ONOBBCGN@?6Warning?3?5BTFN?5did?5not?5respond?5w@ DB 0aH, 'Warn'
	DB	'ing: BTFN did not respond with RPC_BIND_ACK or RPC_BIND_NACK', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0FI@PEIELJGO@?6Warning?3?5Rejected?5transfer?5synt@
CONST	SEGMENT
??_C@_0FI@PEIELJGO@?6Warning?3?5Rejected?5transfer?5synt@ DB 0aH, 'Warnin'
	DB	'g: Rejected transfer syntax %s did not return ack reason RPC_'
	DB	'SYNTAX_UNSUPPORTED', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@PHEPNPBJ@?6Warning?3?5Transfer?5syntax?5?$CFs?5doe@
CONST	SEGMENT
??_C@_0DO@PHEPNPBJ@?6Warning?3?5Transfer?5syntax?5?$CFs?5doe@ DB 0aH, 'Wa'
	DB	'rning: Transfer syntax %s does not support KMS activation', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@LKGEJEDI@?6Warning?3?5Rejected?5transfer?5synt@
CONST	SEGMENT
??_C@_0EO@LKGEJEDI@?6Warning?3?5Rejected?5transfer?5synt@ DB 0aH, 'Warnin'
	DB	'g: Rejected transfer syntax %s did not return syntax version '
	DB	'0 but %u', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@FALBNLMF@?6Warning?3?5Rejected?5transfer?5synt@
CONST	SEGMENT
??_C@_0EA@FALBNLMF@?6Warning?3?5Rejected?5transfer?5synt@ DB 0aH, 'Warnin'
	DB	'g: Rejected transfer syntax %s did not return NULL Guid', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_05HMEFADFI@NDR32?$AA@
CONST	SEGMENT
??_C@_05HMEFADFI@NDR32?$AA@ DB 'NDR32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CMNEGGDF@NDR64?$AA@
CONST	SEGMENT
??_C@_05CMNEGGDF@NDR64?$AA@ DB 'NDR64', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EFGMAIMH@BTFN?$AA@
CONST	SEGMENT
??_C@_04EFGMAIMH@BTFN?$AA@ DB 'BTFN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@HPNJNCNH@?6Fatal?3?5Expected?5?$CFu?5CTX?5items?5bu@
CONST	SEGMENT
??_C@_0CK@HPNJNCNH@?6Fatal?3?5Expected?5?$CFu?5CTX?5items?5bu@ DB 0aH, 'F'
	DB	'atal: Expected %u CTX items but got %u', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@CDFCGJFH@?6Fatal?3?5Incomplete?5RPC?5bind?5ackn@
CONST	SEGMENT
??_C@_0DG@CDFCGJFH@?6Fatal?3?5Incomplete?5RPC?5bind?5ackn@ DB 0aH, 'Fatal'
	DB	': Incomplete RPC bind acknowledgement received', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@NCIGIHDA@?6Fatal?3?5Did?5not?5receive?5a?5respon@
CONST	SEGMENT
??_C@_0DA@NCIGIHDA@?6Fatal?3?5Did?5not?5receive?5a?5respon@ DB 0aH, 'Fata'
	DB	'l: Did not receive a response from server', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@ELGOCPLL@?6Fatal?3?5Sending?5RPC?5bind?5request@
CONST	SEGMENT
??_C@_0CJ@ELGOCPLL@?6Fatal?3?5Sending?5RPC?5bind?5request@ DB 0aH, 'Fatal'
	DB	': Sending RPC bind request failed', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@IFHPELIC@?6Warning?3?5RPC?5stub?5data?5not?5padd@
CONST	SEGMENT
??_C@_0EN@IFHPELIC@?6Warning?3?5RPC?5stub?5data?5not?5padd@ DB 0aH, 'Warn'
	DB	'ing: RPC stub data not padded to zeros according to Microsoft'
	DB	' standard', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@EDAGGGNP@?6Warning?3?5RPC?5stub?5size?5is?5?$CFu?0?5s@
CONST	SEGMENT
??_C@_0EK@EDAGGGNP@?6Warning?3?5RPC?5stub?5size?5is?5?$CFu?0?5s@ DB 0aH, 'W'
	DB	'arning: RPC stub size is %u, should be %u (probably incorrect'
	DB	' padding)', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@KCALNIFM@?6Fatal?3?5No?5or?5incomplete?5KMS?5res@
CONST	SEGMENT
??_C@_0FD@KCALNIFM@?6Fatal?3?5No?5or?5incomplete?5KMS?5res@ DB 0aH, 'Fata'
	DB	'l: No or incomplete KMS response received. Required %u bytes '
	DB	'but only got %i', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@FIBHBLDN@?6Fatal?3?5NDR?5data?5length?5?$CI?$CFu?$CJ?5doe@
CONST	SEGMENT
??_C@_0EA@FIBHBLDN@?6Fatal?3?5NDR?5data?5length?5?$CI?$CFu?$CJ?5doe@ DB 0aH
	DB	'Fatal: NDR data length (%u) does not match NDR data size (%u)'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@LCKBGPNI@?6Fatal?3?5RPC?5response?5context?5id?5@
CONST	SEGMENT
??_C@_0DB@LCKBGPNI@?6Fatal?3?5RPC?5response?5context?5id?5@ DB 0aH, 'Fata'
	DB	'l: RPC response context id %u is not bound', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@HKIEGAIN@?6Fatal?3?5RPC?5response?5cancel?5coun@
CONST	SEGMENT
??_C@_0CM@HKIEGAIN@?6Fatal?3?5RPC?5response?5cancel?5coun@ DB 0aH, 'Fatal'
	DB	': RPC response cancel count is not 0', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@ENNHKCJO@?6Fatal?3?5RPC?5response?5is?5incomple@
CONST	SEGMENT
??_C@_0CE@ENNHKCJO@?6Fatal?3?5RPC?5response?5is?5incomple@ DB 0aH, 'Fatal'
	DB	': RPC response is incomplete', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@NNOGDDAG@?6Fatal?3?5No?5RPC?5response?5received@
CONST	SEGMENT
??_C@_0CO@NNOGDDAG@?6Fatal?3?5No?5RPC?5response?5received@ DB 0aH, 'Fatal'
	DB	': No RPC response received from server', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@JLEJBEGP@?6Fatal?3?5Could?5not?5send?5RPC?5reque@
CONST	SEGMENT
??_C@_0CE@JLEJBEGP@?6Fatal?3?5Could?5not?5send?5RPC?5reque@ DB 0aH, 'Fata'
	DB	'l: Could not send RPC request', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@NKMJHEP@Fatal?3?5Sent?5Call?5Id?5?$CFu?5but?5recei@
CONST	SEGMENT
??_C@_0DL@NKMJHEP@Fatal?3?5Sent?5Call?5Id?5?$CFu?5but?5recei@ DB 'Fatal: '
	DB	'Sent Call Id %u but received answer for Call Id %u', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@HDABALOO@Warning?3?5Buggy?5RPC?5of?5Wine?5detec@
CONST	SEGMENT
??_C@_0EG@HDABALOO@Warning?3?5Buggy?5RPC?5of?5Wine?5detec@ DB 'Warning: B'
	DB	'uggy RPC of Wine detected. Call Id of Response is always 1', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MIHFLBDG@RPC_PF_MULTIPLEX?$AA@
CONST	SEGMENT
??_C@_0BB@MIHFLBDG@RPC_PF_MULTIPLEX?$AA@ DB 'RPC_PF_MULTIPLEX', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@GLJICDBO@Warning?3?5RPC_PF_MULTIPLEX?5of?5RPC@
CONST	SEGMENT
??_C@_0EE@GLJICDBO@Warning?3?5RPC_PF_MULTIPLEX?5of?5RPC@ DB 'Warning: RPC'
	DB	'_PF_MULTIPLEX of RPC request and response should match', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@HOOBBENO@Fatal?3?5Expected?5RPC?5version?55?40?5@
CONST	SEGMENT
??_C@_0CP@HOOBBENO@Fatal?3?5Expected?5RPC?5version?55?40?5@ DB 'Fatal: Ex'
	DB	'pected RPC version 5.0 and got %u.%u', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DHNLACON@RPC_PF_OBJECT?$AA@
CONST	SEGMENT
??_C@_0O@DHNLACON@RPC_PF_OBJECT?$AA@ DB 'RPC_PF_OBJECT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HEOOBKKP@RPC_PF_MAYBE?$AA@
CONST	SEGMENT
??_C@_0N@HEOOBKKP@RPC_PF_MAYBE?$AA@ DB 'RPC_PF_MAYBE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HEJPAFFP@RPC_PF_NOT_EXEC?$AA@
CONST	SEGMENT
??_C@_0BA@HEJPAFFP@RPC_PF_NOT_EXEC?$AA@ DB 'RPC_PF_NOT_EXEC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LFBPBNOH@RPC_PF_RESERVED?$AA@
CONST	SEGMENT
??_C@_0BA@LFBPBNOH@RPC_PF_RESERVED?$AA@ DB 'RPC_PF_RESERVED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@EPFAGCLK@Warning?3?5?$CFs?5should?5not?5be?5set?6?$AA@
CONST	SEGMENT
??_C@_0BP@EPFAGCLK@Warning?3?5?$CFs?5should?5not?5be?5set?6?$AA@ DB 'Warn'
	DB	'ing: %s should not be set', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HLJBDNGA@RPC_PF_CANCEL_PENDING?$AA@
CONST	SEGMENT
??_C@_0BG@HLJBDNGA@RPC_PF_CANCEL_PENDING?$AA@ DB 'RPC_PF_CANCEL_PENDING', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@BKAOLKDE@Fatal?3?5RPC?5packet?5flags?5RPC_PF_F@
CONST	SEGMENT
??_C@_0EI@BKAOLKDE@Fatal?3?5RPC?5packet?5flags?5RPC_PF_F@ DB 'Fatal: RPC '
	DB	'packet flags RPC_PF_FIRST and RPC_PF_LAST are not both set.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@JIFMCEFK@Fatal?3?5RPC?5response?5requests?5aut@
CONST	SEGMENT
??_C@_0CN@JIFMCEFK@Fatal?3?5RPC?5response?5requests?5aut@ DB 'Fatal: RPC '
	DB	'response requests authentication', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@EFGNKFML@Fatal?3?5RPC?5response?5does?5not?5con@
CONST	SEGMENT
??_C@_0FA@EFGNKFML@Fatal?3?5RPC?5response?5does?5not?5con@ DB 'Fatal: RPC'
	DB	' response does not conform to Microsoft''s limited support of'
	DB	' DCE RPC', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@CJEHLGPD@Fatal?3?5Received?5wrong?5RPC?5packet@
CONST	SEGMENT
??_C@_0DP@CJEHLGPD@Fatal?3?5Received?5wrong?5RPC?5packet@ DB 'Fatal: Rece'
	DB	'ived wrong RPC packet type. Expected %u but got %u', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@BBMKAOPO@Fatal?3?5KMSv?$CFhu?4?$CFhu?5unsupported?6?$AA@
CONST	SEGMENT
??_C@_0CA@BBMKAOPO@Fatal?3?5KMSv?$CFhu?4?$CFhu?5unsupported?6?$AA@ DB 'Fa'
	DB	'tal: KMSv%hu.%hu unsupported', 0aH, 00H	; `string'
_TransferSyntaxNDR64 DB 033H
	DB	05H
	DB	071H
	DB	071H
	DB	0baH
	DB	0beH
	DB	037H
	DB	049H
	DB	083H
	DB	019H
	DB	0b5H
	DB	0dbH
	DB	0efH
	DB	09cH
	DB	0ccH
	DB	036H
_InterfaceUuid DB 075H
	DB	021H
	DB	0c8H
	DB	051H
	DB	04eH
	DB	084H
	DB	050H
	DB	047H
	DB	0b0H
	DB	0d8H
	DB	0ecH
	DB	025H
	DB	055H
	DB	055H
	DB	0bcH
	DB	06H
__Actions DB	0cH
	ORG $+3
	DD	FLAT:_checkRpcBindSize
	DD	FLAT:_rpcBind
	DB	02H
	ORG $+3
	DD	FLAT:_checkRpcRequestSize
	DD	FLAT:_rpcRequest
	DB	0fH
	ORG $+3
	DD	FLAT:_checkRpcBindSize
	DD	FLAT:_rpcBind
_TransferSyntaxNDR32 DB 04H
	DB	05dH
	DB	088H
	DB	08aH
	DB	0ebH
	DB	01cH
	DB	0c9H
	DB	011H
	DB	09fH
	DB	0e8H
	DB	08H
	DB	00H
	DB	02bH
	DB	010H
	DB	048H
	DB	060H
_BindTimeFeatureNegotiation DB 02cH
	DB	01cH
	DB	0b7H
	DB	06cH
	DB	012H
	DB	098H
	DB	040H
	DB	045H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
__Versions DD	0fcH
	DD	FLAT:_CreateResponseV4
	DD	0104H
	DD	FLAT:_CreateResponseV6
	DD	0104H
	DD	FLAT:_CreateResponseV6
_CallId	DD	02H
PUBLIC	_rpcServer
; Function compile flags: /Ogspy
; File c:\users\dell\desktop\vlmcsd\src\rpc.c
;	COMDAT _rpcServer
_TEXT	SEGMENT
_Ndr64Ctx$ = -756					; size = 2
_NdrCtx$ = -752						; size = 2
_rpcAssocGroup$1$ = -748				; size = 4
_rpcRequestHeader$ = -744				; size = 16
_responseBuffer$1 = -728				; size = 432
_requestBuffer$2 = -296					; size = 292
_ipstr$ = 8						; size = 4
_rpcServer PROC						; COMDAT
; _sock$ = ecx
; _rpcAssocGroup$ = edx

; 614  : {

  00000	81 ec f8 02 00
	00		 sub	 esp, 760		; 000002f8H
  00006	53		 push	 ebx
  00007	55		 push	 ebp
  00008	56		 push	 esi
  00009	57		 push	 edi

; 615  : 	RPC_HEADER  rpcRequestHeader;
; 616  : 	WORD NdrCtx = RPC_INVALID_CTX, Ndr64Ctx = RPC_INVALID_CTX;

  0000a	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0000f	8b fa		 mov	 edi, edx
  00011	89 7c 24 1c	 mov	 DWORD PTR _rpcAssocGroup$1$[esp+776], edi
  00015	8b e9		 mov	 ebp, ecx
  00017	89 44 24 18	 mov	 DWORD PTR _NdrCtx$[esp+776], eax
  0001b	89 44 24 14	 mov	 DWORD PTR _Ndr64Ctx$[esp+776], eax

; 617  : 
; 618  : 	randomNumberInit();

  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00025	50		 push	 eax
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__srand

; 619  : 
; 620  : 	while (_recv(sock, &rpcRequestHeader, sizeof(rpcRequestHeader)))

  0002c	6a 00		 push	 0
  0002e	6a 10		 push	 16			; 00000010H
  00030	8d 54 24 2c	 lea	 edx, DWORD PTR _rpcRequestHeader$[esp+788]
  00034	8b cd		 mov	 ecx, ebp
  00036	e8 00 00 00 00	 call	 _sendrecv
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003e	e9 5d 01 00 00	 jmp	 $LN35@rpcServer
$LL18@rpcServer:

; 621  : 	{
; 622  : 		//int_fast8_t  _st;
; 623  : 		unsigned int request_len, response_len;
; 624  : 		uint_fast8_t _a;
; 625  : 
; 626  : #if defined(_PEDANTIC) && !defined(NO_LOG)
; 627  : 		checkRpcHeader(&rpcRequestHeader, rpcRequestHeader.PacketType, &logger);
; 628  : #endif // defined(_PEDANTIC) && !defined(NO_LOG)
; 629  : 
; 630  : 		switch (rpcRequestHeader.PacketType)

  00043	8a 44 24 22	 mov	 al, BYTE PTR _rpcRequestHeader$[esp+778]
  00047	84 c0		 test	 al, al
  00049	74 14		 je	 SHORT $LN13@rpcServer
  0004b	3c 0b		 cmp	 al, 11			; 0000000bH
  0004d	74 0c		 je	 SHORT $LN14@rpcServer
  0004f	3c 0e		 cmp	 al, 14			; 0000000eH
  00051	0f 85 51 01 00
	00		 jne	 $LN26@rpcServer

; 634  : 		case RPC_PT_ALTERCONTEXT_REQ: _a = 2; break;

  00057	b3 02		 mov	 bl, 2
  00059	eb 06		 jmp	 SHORT $LN15@rpcServer
$LN14@rpcServer:

; 631  : 		{
; 632  : 		case RPC_PT_BIND_REQ:         _a = 0; break;

  0005b	32 db		 xor	 bl, bl
  0005d	eb 02		 jmp	 SHORT $LN15@rpcServer
$LN13@rpcServer:

; 633  : 		case RPC_PT_REQUEST:          _a = 1; break;

  0005f	b3 01		 mov	 bl, 1
$LN15@rpcServer:

; 635  : 		default: return;
; 636  : 		}
; 637  : 
; 638  : 		request_len = LE16(rpcRequestHeader.FragLength) - sizeof(rpcRequestHeader);

  00061	0f b7 74 24 28	 movzx	 esi, WORD PTR _rpcRequestHeader$[esp+784]
  00066	83 ee 10	 sub	 esi, 16			; 00000010H

; 639  : 
; 640  : 		BYTE requestBuffer[MAX_REQUEST_SIZE + sizeof(RPC_RESPONSE64)];
; 641  : 		BYTE responseBuffer[MAX_RESPONSE_SIZE + sizeof(RPC_HEADER) + sizeof(RPC_RESPONSE64)];
; 642  : 
; 643  : 		RPC_HEADER *rpcResponseHeader = (RPC_HEADER *)responseBuffer;
; 644  : 		RPC_RESPONSE* rpcResponse = (RPC_RESPONSE*)(responseBuffer + sizeof(rpcRequestHeader));
; 645  : 
; 646  : 		// The request is larger than the buffer size
; 647  : 		if (request_len > MAX_REQUEST_SIZE + sizeof(RPC_REQUEST64)) return;

  00069	81 fe 1c 01 00
	00		 cmp	 esi, 284		; 0000011cH
  0006f	0f 87 33 01 00
	00		 ja	 $LN26@rpcServer

; 648  : 
; 649  : 		// Unable to receive the complete request
; 650  : 		if (!_recv(sock, requestBuffer, request_len)) return;

  00075	6a 00		 push	 0
  00077	56		 push	 esi
  00078	8d 94 24 e8 01
	00 00		 lea	 edx, DWORD PTR _requestBuffer$2[esp+784]
  0007f	8b cd		 mov	 ecx, ebp
  00081	e8 00 00 00 00	 call	 _sendrecv
  00086	59		 pop	 ecx
  00087	59		 pop	 ecx
  00088	84 c0		 test	 al, al
  0008a	0f 84 18 01 00
	00		 je	 $LN26@rpcServer

; 651  : 
; 652  : #       if !defined(SIMPLE_RPC) && defined(_PEDANTIC)
; 653  : 		if (rpcRequestHeader.PacketType == RPC_PT_REQUEST && (rpcRequestHeader.VersionMajor != 5 || rpcRequestHeader.VersionMinor != 0))
; 654  : 		{
; 655  : 			response_len = SendError((RPC_RESPONSE64*)rpcResponse, RPC_NCA_PROTO_ERROR);
; 656  : 		}
; 657  : 		else
; 658  : #		endif // !defined(SIMPLE_RPC) && defined(_PEDANTIC)
; 659  : 		{
; 660  : 			BYTE isValid = (BYTE)_Actions[_a].CheckRequest(requestBuffer, request_len, &NdrCtx, &Ndr64Ctx);

  00090	0f b6 c3	 movzx	 eax, bl
  00093	6b d8 0c	 imul	 ebx, eax, 12
  00096	8d 44 24 14	 lea	 eax, DWORD PTR _Ndr64Ctx$[esp+776]
  0009a	50		 push	 eax
  0009b	8d 44 24 1c	 lea	 eax, DWORD PTR _NdrCtx$[esp+780]
  0009f	50		 push	 eax
  000a0	8d 84 24 e8 01
	00 00		 lea	 eax, DWORD PTR _requestBuffer$2[esp+784]
  000a7	56		 push	 esi
  000a8	50		 push	 eax
  000a9	ff 93 04 00 00
	00		 call	 DWORD PTR __Actions[ebx+4]

; 661  : 			if (rpcRequestHeader.PacketType != RPC_PT_REQUEST && !isValid) return;

  000af	8a 54 24 32	 mov	 dl, BYTE PTR _rpcRequestHeader$[esp+794]
  000b3	83 c4 10	 add	 esp, 16			; 00000010H
  000b6	84 d2		 test	 dl, dl
  000b8	74 08		 je	 SHORT $LN8@rpcServer
  000ba	84 c0		 test	 al, al
  000bc	0f 84 e6 00 00
	00		 je	 $LN26@rpcServer
$LN8@rpcServer:

; 662  : 
; 663  : 			// Unable to create a valid response from request
; 664  : 			if (!((response_len = _Actions[_a].GetResponse(requestBuffer, rpcResponse, rpcAssocGroup, sock, &NdrCtx, &Ndr64Ctx, rpcRequestHeader.PacketType != RPC_PT_REQUEST ? rpcRequestHeader.PacketType : isValid, ipstr)))) return;

  000c2	ff b4 24 0c 03
	00 00		 push	 DWORD PTR _ipstr$[esp+772]
  000c9	0f b6 c8	 movzx	 ecx, al
  000cc	84 d2		 test	 dl, dl
  000ce	0f b6 c2	 movzx	 eax, dl
  000d1	0f 45 c8	 cmovne	 ecx, eax
  000d4	0f b6 c1	 movzx	 eax, cl
  000d7	50		 push	 eax
  000d8	8d 44 24 1c	 lea	 eax, DWORD PTR _Ndr64Ctx$[esp+784]
  000dc	50		 push	 eax
  000dd	8d 44 24 24	 lea	 eax, DWORD PTR _NdrCtx$[esp+788]
  000e1	50		 push	 eax
  000e2	55		 push	 ebp
  000e3	57		 push	 edi
  000e4	8d 44 24 58	 lea	 eax, DWORD PTR _responseBuffer$1[esp+816]
  000e8	50		 push	 eax
  000e9	8d 84 24 fc 01
	00 00		 lea	 eax, DWORD PTR _requestBuffer$2[esp+804]
  000f0	50		 push	 eax
  000f1	ff 93 08 00 00
	00		 call	 DWORD PTR __Actions[ebx+8]
  000f7	8b d0		 mov	 edx, eax
  000f9	83 c4 20	 add	 esp, 32			; 00000020H
  000fc	85 d2		 test	 edx, edx
  000fe	0f 84 a4 00 00
	00		 je	 $LN26@rpcServer

; 665  : 		}
; 666  : 
; 667  : 		memcpy(rpcResponseHeader, &rpcRequestHeader, sizeof(RPC_HEADER));

  00104	8d 74 24 20	 lea	 esi, DWORD PTR _rpcRequestHeader$[esp+776]
  00108	8d 7c 24 30	 lea	 edi, DWORD PTR _responseBuffer$1[esp+776]
  0010c	a5		 movsd

; 668  : 
; 669  : #       ifndef SIMPLE_RPC
; 670  : 		if (response_len == 32)
; 671  : 		{
; 672  : 			createRpcHeader(rpcResponseHeader, RPC_PT_FAULT, 0);

  0010d	6a 03		 push	 3
  0010f	a5		 movsd
  00110	a5		 movsd
  00111	a5		 movsd
  00112	83 fa 20	 cmp	 edx, 32			; 00000020H
  00115	75 2a		 jne	 SHORT $LN6@rpcServer
  00117	58		 pop	 eax
  00118	88 44 24 32	 mov	 BYTE PTR _responseBuffer$1[esp+778], al
  0011c	33 c0		 xor	 eax, eax
  0011e	66 c7 44 24 30
	05 00		 mov	 WORD PTR _responseBuffer$1[esp+776], 5
  00125	66 89 44 24 3a	 mov	 WORD PTR _responseBuffer$1[esp+786], ax
  0012a	c7 44 24 34 10
	00 00 00	 mov	 DWORD PTR _responseBuffer$1[esp+780], 16 ; 00000010H
  00132	c7 44 24 3c 02
	00 00 00	 mov	 DWORD PTR _responseBuffer$1[esp+788], 2

; 673  : 			rpcResponseHeader->PacketFlags = RPC_PF_FIRST | RPC_PF_LAST | RPC_PF_NOT_EXEC;

  0013a	c6 44 24 33 23	 mov	 BYTE PTR _responseBuffer$1[esp+779], 35 ; 00000023H

; 674  : 		}
; 675  : 		else

  0013f	eb 1c		 jmp	 SHORT $LN4@rpcServer
$LN6@rpcServer:

; 676  : #		endif // SIMPLE_RPC
; 677  : 		{
; 678  : 			response_len += sizeof(RPC_HEADER);
; 679  : 			rpcResponseHeader->PacketType = _Actions[_a].ResponsePacketType;

  00141	8a 83 00 00 00
	00		 mov	 al, BYTE PTR __Actions[ebx]
  00147	83 c2 10	 add	 edx, 16			; 00000010H

; 680  : 
; 681  : 			if (rpcResponseHeader->PacketType == RPC_PT_ALTERCONTEXT_ACK)

  0014a	0f b6 4c 24 37	 movzx	 ecx, BYTE PTR _responseBuffer$1[esp+783]
  0014f	3c 0f		 cmp	 al, 15			; 0000000fH
  00151	88 44 24 36	 mov	 BYTE PTR _responseBuffer$1[esp+782], al
  00155	58		 pop	 eax
  00156	0f 44 c8	 cmove	 ecx, eax
  00159	88 4c 24 33	 mov	 BYTE PTR _responseBuffer$1[esp+779], cl
$LN4@rpcServer:

; 682  : 			{
; 683  : 				rpcResponseHeader->PacketFlags = RPC_PF_FIRST | RPC_PF_LAST;
; 684  : 			}
; 685  : 		}
; 686  : 
; 687  : 		rpcResponseHeader->FragLength = LE16((WORD)response_len);
; 688  : 
; 689  : 		if (!_send(sock, responseBuffer, response_len)) return;

  0015d	6a 01		 push	 1
  0015f	66 89 54 24 3c	 mov	 WORD PTR _responseBuffer$1[esp+788], dx
  00164	8b cd		 mov	 ecx, ebp
  00166	52		 push	 edx
  00167	8d 54 24 38	 lea	 edx, DWORD PTR _responseBuffer$1[esp+784]
  0016b	e8 00 00 00 00	 call	 _sendrecv
  00170	59		 pop	 ecx
  00171	59		 pop	 ecx
  00172	84 c0		 test	 al, al
  00174	74 32		 je	 SHORT $LN26@rpcServer

; 690  : 
; 691  : 		if (DisconnectImmediately && (rpcResponseHeader->PacketType == RPC_PT_RESPONSE || rpcResponseHeader->PacketType == RPC_PT_FAULT))

  00176	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR _DisconnectImmediately, 0
  0017d	74 0c		 je	 SHORT $LN2@rpcServer
  0017f	8a 44 24 32	 mov	 al, BYTE PTR _responseBuffer$1[esp+778]
  00183	3c 02		 cmp	 al, 2
  00185	74 21		 je	 SHORT $LN26@rpcServer
  00187	3c 03		 cmp	 al, 3
  00189	74 1d		 je	 SHORT $LN26@rpcServer
$LN2@rpcServer:

; 619  : 
; 620  : 	while (_recv(sock, &rpcRequestHeader, sizeof(rpcRequestHeader)))

  0018b	6a 00		 push	 0
  0018d	6a 10		 push	 16			; 00000010H
  0018f	8d 54 24 28	 lea	 edx, DWORD PTR _rpcRequestHeader$[esp+784]
  00193	8b cd		 mov	 ecx, ebp
  00195	e8 00 00 00 00	 call	 _sendrecv
  0019a	8b 7c 24 24	 mov	 edi, DWORD PTR _rpcAssocGroup$1$[esp+784]
  0019e	59		 pop	 ecx
  0019f	59		 pop	 ecx
$LN35@rpcServer:
  001a0	84 c0		 test	 al, al
  001a2	0f 85 9b fe ff
	ff		 jne	 $LL18@rpcServer
$LN26@rpcServer:

; 692  : 			return;
; 693  : 	}
; 694  : }

  001a8	5f		 pop	 edi
  001a9	5e		 pop	 esi
  001aa	5d		 pop	 ebp
  001ab	5b		 pop	 ebx
  001ac	81 c4 f8 02 00
	00		 add	 esp, 760		; 000002f8H
  001b2	c3		 ret	 0
_rpcServer ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\dell\desktop\vlmcsd\src\rpc.c
;	COMDAT _checkRpcRequestSize
_TEXT	SEGMENT
_Request$ = 8						; size = 4
_requestSize$ = 12					; size = 4
_NdrCtx$ = 16						; size = 4
_Ndr64Ctx$ = 20						; size = 4
_checkRpcRequestSize PROC				; COMDAT

; 182  : 	WORD Ctx = LE16(Request->ContextId);
; 183  : 
; 184  : #	if defined(_PEDANTIC) && !defined(NO_LOG)
; 185  : 	CheckRpcRequest(Request, requestSize, NdrCtx, Ndr64Ctx, Ctx);
; 186  : #	endif // defined(_PEDANTIC) && !defined(NO_LOG)
; 187  : 
; 188  : 	// Anything that is smaller than a v4 request is illegal
; 189  : 	if (requestSize < sizeof(REQUEST_V4) + (Ctx != *Ndr64Ctx ? sizeof(RPC_REQUEST) : sizeof(RPC_REQUEST64))) return 0;

  00000	8b 44 24 10	 mov	 eax, DWORD PTR _Ndr64Ctx$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR _Request$[esp-4]
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	0f b7 30	 movzx	 esi, WORD PTR [eax]
  0000d	0f b7 51 04	 movzx	 edx, WORD PTR [ecx+4]
  00011	6a 18		 push	 24			; 00000018H
  00013	58		 pop	 eax
  00014	6a 10		 push	 16			; 00000010H
  00016	66 3b d6	 cmp	 dx, si
  00019	5f		 pop	 edi
  0001a	0f 45 c7	 cmovne	 eax, edi
  0001d	8b 7c 24 10	 mov	 edi, DWORD PTR _requestSize$[esp+4]
  00021	05 fc 00 00 00	 add	 eax, 252		; 000000fcH
  00026	3b f8		 cmp	 edi, eax
  00028	72 43		 jb	 SHORT $LN8@checkRpcRe

; 190  : 
; 191  : 	// Get KMS major version
; 192  : 	uint16_t majorIndex, minor;
; 193  : 	DWORD version;
; 194  : 
; 195  : #	ifndef SIMPLE_RPC
; 196  : 
; 197  : 	if (Ctx != *Ndr64Ctx)

  0002a	66 3b d6	 cmp	 dx, si
  0002d	74 05		 je	 SHORT $LN4@checkRpcRe

; 198  : 	{
; 199  : 		version = LE32(*(DWORD*)Request->Ndr.Data);

  0002f	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]

; 200  : 	}
; 201  : 	else

  00032	eb 03		 jmp	 SHORT $LN3@checkRpcRe
$LN4@checkRpcRe:

; 202  : 	{
; 203  : 		version = LE32(*(DWORD*)Request->Ndr64.Data);

  00034	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
$LN3@checkRpcRe:

; 204  : 	}
; 205  : 
; 206  : #	else // SIMPLE_RPC
; 207  : 
; 208  : 	version = LE32(*(DWORD*)Request->Ndr.Data);
; 209  : 
; 210  : #	endif // SIMPLE_RPC
; 211  : 
; 212  : 	majorIndex = (uint16_t)(version >> 16) - 4;

  00037	8b c1		 mov	 eax, ecx
  00039	c1 e8 10	 shr	 eax, 16			; 00000010H
  0003c	83 e8 04	 sub	 eax, 4
  0003f	0f b7 d0	 movzx	 edx, ax

; 213  : 	minor = (uint16_t)(version & 0xffff);
; 214  : 
; 215  : 	// Only KMS v4, v5 and v6 are supported
; 216  : 	if (majorIndex >= vlmcsd_countof(_Versions) || minor)

  00042	83 fa 03	 cmp	 edx, 3
  00045	73 11		 jae	 SHORT $LN1@checkRpcRe
  00047	66 85 c9	 test	 cx, cx
  0004a	75 0c		 jne	 SHORT $LN1@checkRpcRe

; 222  : 	}
; 223  : 
; 224  : 	// Could check for equality but allow bigger requests to support buggy RPC clients (e.g. wine)
; 225  : 	// Buffer overrun is check by caller.
; 226  : 	return (requestSize >= _Versions[majorIndex].RequestSize);

  0004c	3b 3c d5 00 00
	00 00		 cmp	 edi, DWORD PTR __Versions[edx*8]
  00053	1b c0		 sbb	 eax, eax
  00055	40		 inc	 eax
  00056	eb 17		 jmp	 SHORT $LN6@checkRpcRe
$LN1@checkRpcRe:

; 217  : 	{
; 218  : #		ifndef NO_LOG
; 219  : 		logger("Fatal: KMSv%hu.%hu unsupported\n", (unsigned short)majorIndex + 4, (unsigned short)minor);

  00058	0f b7 c1	 movzx	 eax, cx
  0005b	50		 push	 eax
  0005c	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  0005f	50		 push	 eax
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@BBMKAOPO@Fatal?3?5KMSv?$CFhu?4?$CFhu?5unsupported?6?$AA@
  00065	e8 00 00 00 00	 call	 _logger
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@checkRpcRe:

; 220  : #		endif // NO_LOG
; 221  : 		return 0;

  0006d	33 c0		 xor	 eax, eax
$LN6@checkRpcRe:
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi

; 227  : }

  00071	c3		 ret	 0
_checkRpcRequestSize ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\dell\desktop\vlmcsd\src\rpc.c
;	COMDAT _SendError
_TEXT	SEGMENT
_SendError PROC						; COMDAT
; _Response$ = ecx
; _nca_error$dead$ = edx

; 232  : 	Response->Error.Code = nca_error;
; 233  : 	Response->Error.Padding = 0;

  00000	83 61 0c 00	 and	 DWORD PTR [ecx+12], 0

; 234  : 	Response->AllocHint = LE32(32);
; 235  : 	Response->ContextId = 0;

  00004	33 d2		 xor	 edx, edx
  00006	6a 20		 push	 32			; 00000020H
  00008	58		 pop	 eax
  00009	c7 41 08 03 00
	01 1c		 mov	 DWORD PTR [ecx+8], 469827587 ; 1c010003H
  00010	89 01		 mov	 DWORD PTR [ecx], eax
  00012	66 89 51 04	 mov	 WORD PTR [ecx+4], dx

; 236  : 	return 32;
; 237  : }

  00016	c3		 ret	 0
_SendError ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\dell\desktop\vlmcsd\src\rpc.c
;	COMDAT _rpcRequest
_TEXT	SEGMENT
tv262 = 8						; size = 4
_Request$ = 8						; size = 4
_Response$ = 12						; size = 4
_RpcAssocGroup_unused$ = 16				; size = 4
_sock_unused$ = 20					; size = 4
_NdrCtx$ = 24						; size = 4
_Ndr64Ctx$ = 28						; size = 4
_isValid$ = 32						; size = 1
_ipstr$ = 36						; size = 4
_rpcRequest PROC					; COMDAT

; 249  : 	int ResponseSize; // <0 = Errorcode (HRESULT)
; 250  : 	BYTE* requestData;
; 251  : 	BYTE* responseData;
; 252  : 	BYTE* pRpcReturnCode;
; 253  : 	int len;
; 254  : 
; 255  : #	ifndef SIMPLE_RPC
; 256  : 
; 257  : 	WORD Ctx = LE16(Request->ContextId);
; 258  : 
; 259  : 	if (Ctx == *NdrCtx)

  00000	8b 44 24 14	 mov	 eax, DWORD PTR _NdrCtx$[esp-4]
  00004	53		 push	 ebx
  00005	55		 push	 ebp
  00006	8b 6c 24 0c	 mov	 ebp, DWORD PTR _Request$[esp+4]
  0000a	57		 push	 edi
  0000b	0f b7 5d 04	 movzx	 ebx, WORD PTR [ebp+4]
  0000f	66 3b 18	 cmp	 bx, WORD PTR [eax]
  00012	75 0c		 jne	 SHORT $LN12@rpcRequest

; 260  : 	{
; 261  : 		requestData = (BYTE*)&Request->Ndr.Data;
; 262  : 		responseData = (BYTE*)&Response->Ndr.Data;

  00014	8b 7c 24 14	 mov	 edi, DWORD PTR _Response$[esp+8]
  00018	8d 4d 10	 lea	 ecx, DWORD PTR [ebp+16]
  0001b	8d 57 14	 lea	 edx, DWORD PTR [edi+20]
  0001e	eb 17		 jmp	 SHORT $LN9@rpcRequest
$LN12@rpcRequest:

; 263  : 	}
; 264  : 	else if (Ctx == *Ndr64Ctx)

  00020	8b 44 24 24	 mov	 eax, DWORD PTR _Ndr64Ctx$[esp+8]
  00024	66 3b 18	 cmp	 bx, WORD PTR [eax]
  00027	0f 85 d6 00 00
	00		 jne	 $LN10@rpcRequest

; 265  : 	{
; 266  : 		requestData = (BYTE*)&Request->Ndr64.Data;
; 267  : 		responseData = (BYTE*)&Response->Ndr64.Data;

  0002d	8b 7c 24 14	 mov	 edi, DWORD PTR _Response$[esp+8]
  00031	8d 4d 18	 lea	 ecx, DWORD PTR [ebp+24]
  00034	8d 57 20	 lea	 edx, DWORD PTR [edi+32]
$LN9@rpcRequest:

; 272  : 	}
; 273  : 
; 274  : #	else // SIMPLE_RPC
; 275  : 
; 276  : 	requestData = (BYTE*)&Request->Ndr.Data;
; 277  : 	responseData = (BYTE*)&Response->Ndr.Data;
; 278  : 
; 279  : #	endif // SIMPLE_RPC
; 280  : 
; 281  : 	ResponseSize = 0x8007000D; // Invalid Data
; 282  : 
; 283  : 	if (isValid)

  00037	80 7c 24 28 00	 cmp	 BYTE PTR _isValid$[esp+8], 0
  0003c	56		 push	 esi
  0003d	be 0d 00 07 80	 mov	 esi, -2147024883	; 8007000dH
  00042	c7 44 24 14 04
	00 00 00	 mov	 DWORD PTR tv262[esp+12], 4
  0004a	74 23		 je	 SHORT $LN7@rpcRequest

; 284  : 	{
; 285  : 		uint16_t majorIndex = LE16(((WORD*)requestData)[1]) - 4;

  0004c	66 8b 41 02	 mov	 ax, WORD PTR [ecx+2]
  00050	66 2b 44 24 14	 sub	 ax, WORD PTR tv262[esp+12]

; 286  : 		if (!((ResponseSize = _Versions[majorIndex].CreateResponse(requestData, responseData, ipstr)))) ResponseSize = 0x8007000D;

  00055	ff 74 24 30	 push	 DWORD PTR _ipstr$[esp+12]
  00059	0f b7 c0	 movzx	 eax, ax
  0005c	52		 push	 edx
  0005d	51		 push	 ecx
  0005e	ff 14 c5 04 00
	00 00		 call	 DWORD PTR __Versions[eax*8+4]
  00065	83 c4 0c	 add	 esp, 12			; 0000000cH
  00068	85 c0		 test	 eax, eax
  0006a	0f 44 c6	 cmove	 eax, esi
  0006d	8b f0		 mov	 esi, eax
$LN7@rpcRequest:

; 287  : 	}
; 288  : 
; 289  : #	ifndef SIMPLE_RPC
; 290  : 
; 291  : 	if (Ctx != *Ndr64Ctx)

  0006f	8b 44 24 28	 mov	 eax, DWORD PTR _Ndr64Ctx$[esp+12]
  00073	33 c9		 xor	 ecx, ecx
  00075	66 3b 18	 cmp	 bx, WORD PTR [eax]
  00078	74 1a		 je	 SHORT $LN6@rpcRequest

; 292  : 	{
; 293  : 
; 294  : #	endif // !SIMPLE_RPC
; 295  : 		if (ResponseSize < 0)

  0007a	85 f6		 test	 esi, esi
  0007c	79 04		 jns	 SHORT $LN5@rpcRequest

; 296  : 		{
; 297  : 			Response->Ndr.DataSizeMax = Response->Ndr.DataLength = 0;
; 298  : 			len = sizeof(Response->Ndr) - sizeof(Response->Ndr.DataSizeIs);

  0007e	6a 08		 push	 8

; 299  : 		}
; 300  : 		else

  00080	eb 1e		 jmp	 SHORT $LN18@rpcRequest
$LN5@rpcRequest:

; 301  : 		{
; 302  : 			Response->Ndr.DataSizeMax = LE32(0x00020000);

  00082	c7 47 0c 00 00
	02 00		 mov	 DWORD PTR [edi+12], 131072 ; 00020000H

; 303  : 			Response->Ndr.DataLength = Response->Ndr.DataSizeIs = LE32(ResponseSize);
; 304  : 			len = ResponseSize + sizeof(Response->Ndr);

  00089	8d 5e 0c	 lea	 ebx, DWORD PTR [esi+12]
  0008c	89 77 10	 mov	 DWORD PTR [edi+16], esi
  0008f	89 77 08	 mov	 DWORD PTR [edi+8], esi

; 305  : 		}
; 306  : 
; 307  : #	ifndef SIMPLE_RPC
; 308  : 
; 309  : 	}
; 310  : 	else

  00092	eb 2e		 jmp	 SHORT $LN1@rpcRequest
$LN6@rpcRequest:

; 311  : 	{
; 312  : 		if (ResponseSize < 0)
; 313  : 		{
; 314  : 			Response->Ndr64.DataSizeMax = Response->Ndr64.DataLength = 0;

  00094	89 4f 14	 mov	 DWORD PTR [edi+20], ecx
  00097	85 f6		 test	 esi, esi
  00099	79 0e		 jns	 SHORT $LN2@rpcRequest
  0009b	89 4f 10	 mov	 DWORD PTR [edi+16], ecx

; 315  : 			len = sizeof(Response->Ndr64) - sizeof(Response->Ndr64.DataSizeIs);

  0009e	6a 10		 push	 16			; 00000010H
$LN18@rpcRequest:

; 311  : 	{
; 312  : 		if (ResponseSize < 0)
; 313  : 		{
; 314  : 			Response->Ndr64.DataSizeMax = Response->Ndr64.DataLength = 0;

  000a0	89 4f 0c	 mov	 DWORD PTR [edi+12], ecx
  000a3	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 315  : 			len = sizeof(Response->Ndr64) - sizeof(Response->Ndr64.DataSizeIs);

  000a6	5b		 pop	 ebx

; 316  : 		}
; 317  : 		else

  000a7	eb 19		 jmp	 SHORT $LN1@rpcRequest
$LN2@rpcRequest:

; 318  : 		{
; 319  : 			Response->Ndr64.DataSizeMax = LE64(0x00020000ULL);
; 320  : 			Response->Ndr64.DataLength = Response->Ndr64.DataSizeIs = LE64((uint64_t)ResponseSize);

  000a9	8b c6		 mov	 eax, esi
  000ab	c7 47 10 00 00
	02 00		 mov	 DWORD PTR [edi+16], 131072 ; 00020000H
  000b2	99		 cdq

; 321  : 			len = ResponseSize + sizeof(Response->Ndr64);

  000b3	8d 5e 18	 lea	 ebx, DWORD PTR [esi+24]
  000b6	89 47 18	 mov	 DWORD PTR [edi+24], eax
  000b9	89 57 1c	 mov	 DWORD PTR [edi+28], edx
  000bc	89 47 08	 mov	 DWORD PTR [edi+8], eax
  000bf	89 57 0c	 mov	 DWORD PTR [edi+12], edx
$LN1@rpcRequest:

; 322  : 		}
; 323  : 	}
; 324  : 
; 325  : #	endif // !SIMPLE_RPC
; 326  : 
; 327  : 	pRpcReturnCode = ((BYTE*)&Response->Ndr) + len;
; 328  : 	UA32(pRpcReturnCode) = ResponseSize < 0 ? LE32(ResponseSize) : 0;

  000c2	33 c0		 xor	 eax, eax
  000c4	8d 0c 3b	 lea	 ecx, DWORD PTR [ebx+edi]
  000c7	85 f6		 test	 esi, esi

; 329  : 	len += sizeof(DWORD);

  000c9	6a 04		 push	 4
  000cb	0f 48 c6	 cmovs	 eax, esi
  000ce	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  000d1	58		 pop	 eax
  000d2	03 d8		 add	 ebx, eax

; 330  : 
; 331  : 	// Pad zeros to 32-bit align (seems not neccassary but Windows RPC does it this way)
; 332  : 	int pad = ((~len & 3) + 1) & 3;
; 333  : 	memset(pRpcReturnCode + sizeof(DWORD), 0, pad);

  000d4	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  000d7	8b f3		 mov	 esi, ebx
  000d9	f7 d6		 not	 esi
  000db	46		 inc	 esi
  000dc	83 e6 03	 and	 esi, 3
  000df	56		 push	 esi
  000e0	6a 00		 push	 0
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 _memset

; 334  : 	len += pad;

  000e8	03 de		 add	 ebx, esi
  000ea	83 c4 0c	 add	 esp, 12			; 0000000cH

; 335  : 
; 336  : 	Response->AllocHint = LE32(len);

  000ed	89 1f		 mov	 DWORD PTR [edi], ebx

; 337  : 	Response->ContextId = Request->ContextId;

  000ef	66 8b 45 04	 mov	 ax, WORD PTR [ebp+4]
  000f3	66 89 47 04	 mov	 WORD PTR [edi+4], ax

; 338  : 
; 339  : 	*((WORD*)&Response->CancelCount) = 0; // CancelCount + Pad1

  000f7	33 c0		 xor	 eax, eax
  000f9	66 89 47 06	 mov	 WORD PTR [edi+6], ax

; 340  : 
; 341  : 	return len + 8;

  000fd	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  00100	5e		 pop	 esi
  00101	eb 1a		 jmp	 SHORT $LN13@rpcRequest
$LN10@rpcRequest:

; 268  : 	}
; 269  : 	else
; 270  : 	{
; 271  : 		return SendError(Response, RPC_NCA_UNK_IF);

  00103	8b 4c 24 14	 mov	 ecx, DWORD PTR _Response$[esp+8]
  00107	6a 20		 push	 32			; 00000020H
  00109	58		 pop	 eax
  0010a	83 61 0c 00	 and	 DWORD PTR [ecx+12], 0
  0010e	33 d2		 xor	 edx, edx
  00110	c7 41 08 03 00
	01 1c		 mov	 DWORD PTR [ecx+8], 469827587 ; 1c010003H
  00117	89 01		 mov	 DWORD PTR [ecx], eax
  00119	66 89 51 04	 mov	 WORD PTR [ecx+4], dx
$LN13@rpcRequest:

; 342  : }

  0011d	5f		 pop	 edi
  0011e	5d		 pop	 ebp
  0011f	5b		 pop	 ebx
  00120	c3		 ret	 0
_rpcRequest ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\dell\desktop\vlmcsd\src\rpc.c
;	COMDAT _checkRpcBindSize
_TEXT	SEGMENT
_Request$ = 8						; size = 4
_RequestSize$ = 12					; size = 4
_NdrCtx_unused$ = 16					; size = 4
_Ndr64Ctx_unused$ = 20					; size = 4
_checkRpcBindSize PROC					; COMDAT

; 411  : 	if (RequestSize < sizeof(RPC_BIND_REQUEST)) return FALSE;

  00000	83 7c 24 08 38	 cmp	 DWORD PTR _RequestSize$[esp-4], 56 ; 00000038H
  00005	73 03		 jae	 SHORT $LN2@checkRpcBi
  00007	33 c0		 xor	 eax, eax

; 416  : 
; 417  : #if defined(_PEDANTIC) && !defined(NO_LOG)
; 418  : 	CheckRpcBindRequest(Request, RequestSize);
; 419  : #endif // defined(_PEDANTIC) && !defined(NO_LOG)
; 420  : 
; 421  : 	return TRUE;
; 422  : }

  00009	c3		 ret	 0
$LN2@checkRpcBi:

; 412  : 
; 413  : 	unsigned int numCtxItems = LE32(Request->NumCtxItems);
; 414  : 
; 415  : 	if (RequestSize < sizeof(RPC_BIND_REQUEST) - sizeof(Request->CtxItems[0]) + numCtxItems * sizeof(Request->CtxItems[0])) return FALSE;

  0000a	8b 44 24 04	 mov	 eax, DWORD PTR _Request$[esp-4]
  0000e	6b 40 08 2c	 imul	 eax, DWORD PTR [eax+8], 44
  00012	83 c0 0c	 add	 eax, 12			; 0000000cH
  00015	39 44 24 08	 cmp	 DWORD PTR _RequestSize$[esp-4], eax
  00019	1b c0		 sbb	 eax, eax
  0001b	40		 inc	 eax

; 416  : 
; 417  : #if defined(_PEDANTIC) && !defined(NO_LOG)
; 418  : 	CheckRpcBindRequest(Request, RequestSize);
; 419  : #endif // defined(_PEDANTIC) && !defined(NO_LOG)
; 420  : 
; 421  : 	return TRUE;
; 422  : }

  0001c	c3		 ret	 0
_checkRpcBindSize ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\dell\desktop\vlmcsd\src\rpc.c
;	COMDAT _rpcBind
_TEXT	SEGMENT
_IsNDR64possible$1$ = -145				; size = 1
tv465 = -144						; size = 4
_isInterfaceUUID$1$ = -144				; size = 4
_socklen$ = -144					; size = 4
_numCtxItems$1$ = -140					; size = 4
tv466 = -136						; size = 4
_nackReason$1$ = -132					; size = 4
_addr$ = -128						; size = 128
_Request$ = 8						; size = 4
_Response$ = 12						; size = 4
_RpcAssocGroup$ = 16					; size = 4
_sock$ = 20						; size = 4
_NdrCtx$ = 24						; size = 4
_Ndr64Ctx$ = 28						; size = 4
_packetType$ = 32					; size = 1
_ipstr_unused$ = 36					; size = 4
_rpcBind PROC						; COMDAT

; 433  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H

; 434  : 	unsigned int i;
; 435  : 	DWORD numCtxItems = LE32(Request->NumCtxItems);
; 436  : 	int_fast8_t IsNDR64possible = FALSE;
; 437  : 	uint_fast8_t portNumberSize;
; 438  : 
; 439  : 	socklen_t socklen;
; 440  : 	struct sockaddr_storage addr;
; 441  : 
; 442  : 	// M$ RPC does not do this. Pad bytes contain apparently random data
; 443  : 	// memset(Response->SecondaryAddress, 0, sizeof(Response->SecondaryAddress));
; 444  : 
; 445  : 	socklen = sizeof addr;
; 446  : 
; 447  : 	if (
; 448  : 		packetType == RPC_PT_ALTERCONTEXT_REQ ||
; 449  : 		getsockname(sock, (struct sockaddr*)&addr, &socklen) ||
; 450  : 		getnameinfo((struct sockaddr*)&addr, socklen, NULL, 0, (char*)Response->SecondaryAddress, sizeof(Response->SecondaryAddress), NI_NUMERICSERV))

  0000c	80 7d 20 0e	 cmp	 BYTE PTR _packetType$[ebp], 14 ; 0000000eH
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 0c	 mov	 esi, DWORD PTR _Response$[ebp]
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _Request$[ebp]
  00019	c6 44 24 0f 00	 mov	 BYTE PTR _IsNDR64possible$1$[esp+160], 0
  0001e	c7 44 24 10 80
	00 00 00	 mov	 DWORD PTR _socklen$[esp+160], 128 ; 00000080H
  00026	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00029	89 44 24 14	 mov	 DWORD PTR _numCtxItems$1$[esp+160], eax
  0002d	74 47		 je	 SHORT $LN18@rpcBind
  0002f	8d 44 24 10	 lea	 eax, DWORD PTR _socklen$[esp+160]
  00033	50		 push	 eax
  00034	8d 44 24 24	 lea	 eax, DWORD PTR _addr$[esp+164]
  00038	50		 push	 eax
  00039	ff 75 14	 push	 DWORD PTR _sock$[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__getsockname@12
  00042	85 c0		 test	 eax, eax
  00044	75 30		 jne	 SHORT $LN18@rpcBind
  00046	6a 08		 push	 8
  00048	6a 06		 push	 6
  0004a	8d 5e 0a	 lea	 ebx, DWORD PTR [esi+10]
  0004d	53		 push	 ebx
  0004e	50		 push	 eax
  0004f	50		 push	 eax
  00050	ff 74 24 24	 push	 DWORD PTR _socklen$[esp+180]
  00054	8d 44 24 38	 lea	 eax, DWORD PTR _addr$[esp+184]
  00058	50		 push	 eax
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__getnameinfo@28
  0005f	85 c0		 test	 eax, eax
  00061	75 13		 jne	 SHORT $LN18@rpcBind

; 454  : 	}
; 455  : 	else
; 456  : 	{
; 457  : 		portNumberSize = (uint_fast8_t)strlen((char*)Response->SecondaryAddress) + 1;

  00063	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
$LL30@rpcBind:
  00066	8a 03		 mov	 al, BYTE PTR [ebx]
  00068	43		 inc	 ebx
  00069	84 c0		 test	 al, al
  0006b	75 f9		 jne	 SHORT $LL30@rpcBind
  0006d	2b d9		 sub	 ebx, ecx
  0006f	fe c3		 inc	 bl

; 458  : 		Response->SecondaryAddressLength = LE16(portNumberSize);

  00071	0f b6 c3	 movzx	 eax, bl
  00074	eb 04		 jmp	 SHORT $LN39@rpcBind
$LN18@rpcBind:

; 451  : 	{
; 452  : 		portNumberSize = 0;

  00076	32 db		 xor	 bl, bl

; 453  : 		Response->SecondaryAddressLength = 0;

  00078	33 c0		 xor	 eax, eax
$LN39@rpcBind:
  0007a	66 89 46 08	 mov	 WORD PTR [esi+8], ax

; 459  : 	}
; 460  : 
; 461  : 	Response->MaxXmitFrag = Request->MaxXmitFrag;

  0007e	66 8b 07	 mov	 ax, WORD PTR [edi]
  00081	66 89 06	 mov	 WORD PTR [esi], ax

; 462  : 	Response->MaxRecvFrag = Request->MaxRecvFrag;

  00084	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  00088	66 89 46 02	 mov	 WORD PTR [esi+2], ax

; 463  : 	Response->AssocGroup = LE32(RpcAssocGroup);

  0008c	8b 45 10	 mov	 eax, DWORD PTR _RpcAssocGroup$[ebp]
  0008f	89 5c 24 18	 mov	 DWORD PTR tv466[esp+160], ebx
  00093	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 464  : 
; 465  : 	// This is really ugly (but efficient) code to support padding after the secondary address field
; 466  : 	if (portNumberSize < 3)

  00096	80 fb 03	 cmp	 bl, 3
  00099	73 06		 jae	 SHORT $LN16@rpcBind

; 467  : 	{
; 468  : 		Response = (RPC_BIND_RESPONSE*)((BYTE*)Response - 4);

  0009b	83 ee 04	 sub	 esi, 4
  0009e	89 75 0c	 mov	 DWORD PTR _Response$[ebp], esi
$LN16@rpcBind:

; 469  : 	}
; 470  : 
; 471  : 	Response->NumResults = Request->NumCtxItems;

  000a1	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000a4	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 472  : 
; 473  : #	ifndef SIMPLE_RPC
; 474  : 
; 475  : 	for (i = 0; i < numCtxItems; i++)

  000a7	8b 44 24 14	 mov	 eax, DWORD PTR _numCtxItems$1$[esp+160]
  000ab	85 c0		 test	 eax, eax
  000ad	0f 84 82 01 00
	00		 je	 $LN8@rpcBind

; 469  : 	}
; 470  : 
; 471  : 	Response->NumResults = Request->NumCtxItems;

  000b3	8b 75 18	 mov	 esi, DWORD PTR _NdrCtx$[ebp]
  000b6	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  000b9	8b 7d 1c	 mov	 edi, DWORD PTR _Ndr64Ctx$[ebp]
  000bc	89 44 24 10	 mov	 DWORD PTR tv465[esp+160], eax
$LL15@rpcBind:

; 476  : 	{
; 477  : 		const struct CtxItem* ctxItem = &Request->CtxItems[i];
; 478  : 		if (IsEqualGUID((GUID*)TransferSyntaxNDR32, &ctxItem->TransferSyntax))

  000c0	33 d2		 xor	 edx, edx
$LL31@rpcBind:
  000c2	b8 00 00 00 00	 mov	 eax, OFFSET _TransferSyntaxNDR32
  000c7	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  000ca	3b 44 91 18	 cmp	 eax, DWORD PTR [ecx+edx*4+24]
  000ce	75 0c		 jne	 SHORT $LN12@rpcBind
  000d0	42		 inc	 edx
  000d1	83 fa 04	 cmp	 edx, 4
  000d4	75 ec		 jne	 SHORT $LL31@rpcBind

; 479  : 		{
; 480  : 			/*if (packetType == RPC_PT_BIND_REQ)*/
; 481  : 			*NdrCtx = LE16(ctxItem->ContextId);

  000d6	66 8b 01	 mov	 ax, WORD PTR [ecx]
  000d9	66 89 06	 mov	 WORD PTR [esi], ax
$LN12@rpcBind:

; 482  : 		}
; 483  : 
; 484  : 		if (UseServerRpcNDR64 && IsEqualGUID((GUID*)TransferSyntaxNDR64, &ctxItem->TransferSyntax))

  000dc	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR _UseServerRpcNDR64, 0
  000e3	74 21		 je	 SHORT $LN14@rpcBind
  000e5	33 d2		 xor	 edx, edx
$LL32@rpcBind:
  000e7	b8 00 00 00 00	 mov	 eax, OFFSET _TransferSyntaxNDR64
  000ec	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  000ef	3b 44 91 18	 cmp	 eax, DWORD PTR [ecx+edx*4+24]
  000f3	75 11		 jne	 SHORT $LN14@rpcBind
  000f5	42		 inc	 edx
  000f6	83 fa 04	 cmp	 edx, 4
  000f9	75 ec		 jne	 SHORT $LL32@rpcBind

; 485  : 		{
; 486  : 			IsNDR64possible = TRUE;
; 487  : 
; 488  : 			/*if (packetType == RPC_PT_BIND_REQ)*/
; 489  : 			*Ndr64Ctx = LE16(ctxItem->ContextId);

  000fb	66 8b 01	 mov	 ax, WORD PTR [ecx]
  000fe	c6 44 24 0f 01	 mov	 BYTE PTR _IsNDR64possible$1$[esp+160], 1
  00103	66 89 07	 mov	 WORD PTR [edi], ax
$LN14@rpcBind:

; 472  : 
; 473  : #	ifndef SIMPLE_RPC
; 474  : 
; 475  : 	for (i = 0; i < numCtxItems; i++)

  00106	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00109	ff 4c 24 10	 dec	 DWORD PTR tv465[esp+160]
  0010d	75 b1		 jne	 SHORT $LL15@rpcBind

; 490  : 		}
; 491  : 	}
; 492  : 
; 493  : #	endif // !SIMPLE_RPC
; 494  : 
; 495  : 	for (i = 0; i < numCtxItems; i++)

  0010f	8b 44 24 14	 mov	 eax, DWORD PTR _numCtxItems$1$[esp+160]
  00113	8b 75 0c	 mov	 esi, DWORD PTR _Response$[ebp]
  00116	8b 7d 08	 mov	 edi, DWORD PTR _Request$[ebp]
  00119	85 c0		 test	 eax, eax
  0011b	0f 84 14 01 00
	00		 je	 $LN8@rpcBind
  00121	8d 57 24	 lea	 edx, DWORD PTR [edi+36]
  00124	8b d8		 mov	 ebx, eax
  00126	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
$LL10@rpcBind:

; 496  : 	{
; 497  : 		struct CtxResults* result = Response->Results+i;
; 498  : 		const GUID* ctxTransferSyntax = &Request->CtxItems[i].TransferSyntax;
; 499  : 
; 500  : #		ifndef SIMPLE_RPC
; 501  : 		WORD nackReason = RPC_ABSTRACTSYNTAX_UNSUPPORTED;
; 502  : #		endif // !SIMPLE_RPC
; 503  : 
; 504  : 		memset(&result->TransferSyntax, 0, sizeof(GUID));

  00129	33 c0		 xor	 eax, eax
  0012b	c7 44 24 1c 01
	00 00 00	 mov	 DWORD PTR _nackReason$1$[esp+160], 1
  00133	8d 79 f0	 lea	 edi, DWORD PTR [ecx-16]

; 505  : 
; 506  : #		ifndef SIMPLE_RPC
; 507  : 		int isInterfaceUUID = IsEqualGUID(&Request->CtxItems[i].InterfaceUUID, (GUID*)InterfaceUuid);

  00136	33 f6		 xor	 esi, esi
  00138	ab		 stosd
  00139	ab		 stosd
  0013a	ab		 stosd
  0013b	ab		 stosd
  0013c	bf 00 00 00 00	 mov	 edi, OFFSET _InterfaceUuid
$LL33@rpcBind:
  00141	8b 44 b2 ec	 mov	 eax, DWORD PTR [edx+esi*4-20]
  00145	3b 04 b7	 cmp	 eax, DWORD PTR [edi+esi*4]
  00148	75 0b		 jne	 SHORT $LN34@rpcBind
  0014a	46		 inc	 esi
  0014b	83 fe 04	 cmp	 esi, 4
  0014e	75 f1		 jne	 SHORT $LL33@rpcBind
  00150	33 c0		 xor	 eax, eax
  00152	40		 inc	 eax
  00153	eb 02		 jmp	 SHORT $LN41@rpcBind
$LN34@rpcBind:
  00155	33 c0		 xor	 eax, eax
$LN41@rpcBind:
  00157	89 44 24 10	 mov	 DWORD PTR _isInterfaceUUID$1$[esp+160], eax

; 508  : 		if (isInterfaceUUID) nackReason = RPC_SYNTAX_UNSUPPORTED;

  0015b	85 c0		 test	 eax, eax
  0015d	74 3c		 je	 SHORT $LN38@rpcBind

; 509  : #		else // SIMPLE_RPC
; 510  : #		define isInterfaceUUID TRUE
; 511  : #		endif // SIMPLE_RPC
; 512  : 
; 513  : 		if (isInterfaceUUID && !IsNDR64possible && IsEqualGUID((GUID*)TransferSyntaxNDR32, ctxTransferSyntax))

  0015f	80 7c 24 0f 00	 cmp	 BYTE PTR _IsNDR64possible$1$[esp+160], 0
  00164	6a 02		 push	 2
  00166	58		 pop	 eax
  00167	8b f8		 mov	 edi, eax
  00169	75 34		 jne	 SHORT $LN6@rpcBind
  0016b	33 f6		 xor	 esi, esi
$LL36@rpcBind:
  0016d	b8 00 00 00 00	 mov	 eax, OFFSET _TransferSyntaxNDR32
  00172	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  00175	3b 04 b2	 cmp	 eax, DWORD PTR [edx+esi*4]
  00178	75 25		 jne	 SHORT $LN6@rpcBind
  0017a	46		 inc	 esi
  0017b	83 fe 04	 cmp	 esi, 4
  0017e	75 ed		 jne	 SHORT $LL36@rpcBind

; 514  : 		{
; 515  : 			result->SyntaxVersion = LE32(2);

  00180	6a 02		 push	 2
  00182	58		 pop	 eax
  00183	89 01		 mov	 DWORD PTR [ecx], eax

; 516  : 			result->AckResult = result->AckReason = RPC_BIND_ACCEPT;
; 517  : 			memcpy(&result->TransferSyntax, TransferSyntaxNDR32, sizeof(GUID));

  00185	be 00 00 00 00	 mov	 esi, OFFSET _TransferSyntaxNDR32
$LN43@rpcBind:
  0018a	33 c0		 xor	 eax, eax
  0018c	8d 79 f0	 lea	 edi, DWORD PTR [ecx-16]
  0018f	89 41 ec	 mov	 DWORD PTR [ecx-20], eax
  00192	a5		 movsd
  00193	a5		 movsd
  00194	a5		 movsd
  00195	a5		 movsd

; 518  : 			continue;

  00196	e9 85 00 00 00	 jmp	 $LN9@rpcBind
$LN38@rpcBind:
  0019b	8b 7c 24 1c	 mov	 edi, DWORD PTR _nackReason$1$[esp+160]
$LN6@rpcBind:

; 519  : 		}
; 520  : 
; 521  : #		ifndef SIMPLE_RPC
; 522  : 
; 523  : 		if (IsEqualGUID((GUID*)TransferSyntaxNDR64, ctxTransferSyntax))

  0019f	33 f6		 xor	 esi, esi
$LL37@rpcBind:
  001a1	b8 00 00 00 00	 mov	 eax, OFFSET _TransferSyntaxNDR64
  001a6	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  001a9	3b 04 b2	 cmp	 eax, DWORD PTR [edx+esi*4]
  001ac	75 2e		 jne	 SHORT $LN3@rpcBind
  001ae	46		 inc	 esi
  001af	83 fe 04	 cmp	 esi, 4
  001b2	75 ed		 jne	 SHORT $LL37@rpcBind

; 524  : 		{
; 525  : 			if (!UseServerRpcNDR64) nackReason = RPC_SYNTAX_UNSUPPORTED;

  001b4	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR _UseServerRpcNDR64, 0
  001bb	6a 02		 push	 2
  001bd	58		 pop	 eax
  001be	0f 44 f8	 cmove	 edi, eax

; 526  : 
; 527  : 			if (isInterfaceUUID && IsNDR64possible)

  001c1	83 7c 24 10 00	 cmp	 DWORD PTR _isInterfaceUUID$1$[esp+160], 0
  001c6	74 14		 je	 SHORT $LN3@rpcBind
  001c8	80 7c 24 0f 00	 cmp	 BYTE PTR _IsNDR64possible$1$[esp+160], 0
  001cd	74 0d		 je	 SHORT $LN3@rpcBind

; 528  : 			{
; 529  : 				result->SyntaxVersion = LE32(1);

  001cf	c7 01 01 00 00
	00		 mov	 DWORD PTR [ecx], 1

; 530  : 				result->AckResult = result->AckReason = RPC_BIND_ACCEPT;
; 531  : 				memcpy(&result->TransferSyntax, TransferSyntaxNDR64, sizeof(GUID));

  001d5	be 00 00 00 00	 mov	 esi, OFFSET _TransferSyntaxNDR64

; 532  : 				continue;

  001da	eb ae		 jmp	 SHORT $LN43@rpcBind
$LN3@rpcBind:

; 533  : 			}
; 534  : 		}
; 535  : 
; 536  : 		if (!memcmp(BindTimeFeatureNegotiation, ctxTransferSyntax, 8))

  001dc	be 00 00 00 00	 mov	 esi, OFFSET _BindTimeFeatureNegotiation
  001e1	8b 06		 mov	 eax, DWORD PTR [esi]
  001e3	3b 02		 cmp	 eax, DWORD PTR [edx]
  001e5	75 2b		 jne	 SHORT $LN1@rpcBind
  001e7	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  001ea	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  001ed	75 23		 jne	 SHORT $LN1@rpcBind

; 537  : 		{
; 538  : 			nackReason = RPC_SYNTAX_UNSUPPORTED;
; 539  : 
; 540  : 			if (UseServerRpcBTFN)

  001ef	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR _UseServerRpcBTFN, 0
  001f6	6a 02		 push	 2
  001f8	5f		 pop	 edi
  001f9	74 17		 je	 SHORT $LN1@rpcBind

; 541  : 			{
; 542  : 				result->SyntaxVersion = 0;

  001fb	83 21 00	 and	 DWORD PTR [ecx], 0

; 543  : 				result->AckResult = RPC_BIND_ACK;

  001fe	6a 03		 push	 3
  00200	5e		 pop	 esi
  00201	66 89 71 ec	 mov	 WORD PTR [ecx-20], si

; 544  : 
; 545  : 				// Features requested are actually encoded in the GUID
; 546  : 				result->AckReason =
; 547  : 					((WORD*)(ctxTransferSyntax))[4] &
; 548  : 					(RPC_BTFN_SEC_CONTEXT_MULTIPLEX | RPC_BTFN_KEEP_ORPHAN);

  00205	66 8b 42 08	 mov	 ax, WORD PTR [edx+8]
  00209	66 23 c6	 and	 ax, si
  0020c	66 89 41 ee	 mov	 WORD PTR [ecx-18], ax

; 549  : 
; 550  : 				continue;

  00210	eb 0e		 jmp	 SHORT $LN9@rpcBind
$LN1@rpcBind:

; 551  : 			}
; 552  : 		}
; 553  : 
; 554  : #		endif // !SIMPLE_RPC
; 555  : 
; 556  : 		result->SyntaxVersion = 0;

  00212	83 21 00	 and	 DWORD PTR [ecx], 0

; 557  : 		result->AckResult = RPC_BIND_NACK;

  00215	6a 02		 push	 2
  00217	58		 pop	 eax
  00218	66 89 41 ec	 mov	 WORD PTR [ecx-20], ax

; 558  : #		ifndef SIMPLE_RPC
; 559  : 		result->AckReason = nackReason;

  0021c	66 89 79 ee	 mov	 WORD PTR [ecx-18], di
$LN9@rpcBind:

; 490  : 		}
; 491  : 	}
; 492  : 
; 493  : #	endif // !SIMPLE_RPC
; 494  : 
; 495  : 	for (i = 0; i < numCtxItems; i++)

  00220	83 c1 18	 add	 ecx, 24			; 00000018H
  00223	83 c2 2c	 add	 edx, 44			; 0000002cH
  00226	4b		 dec	 ebx
  00227	0f 85 fc fe ff
	ff		 jne	 $LL10@rpcBind
  0022d	8b 5c 24 18	 mov	 ebx, DWORD PTR tv466[esp+160]
  00231	8b 44 24 14	 mov	 eax, DWORD PTR _numCtxItems$1$[esp+160]
$LN8@rpcBind:

; 560  : #		else // SIMPLE_RPC
; 561  : #		undef isInterfaceUUID
; 562  : 		result->AckReason = RPC_SYNTAX_UNSUPPORTED;
; 563  : #		endif // SIMPLE_RPC
; 564  : 	}
; 565  : 
; 566  : 	//if (!_st) return 0;
; 567  : 
; 568  : 	return sizeof(RPC_BIND_RESPONSE) + numCtxItems * sizeof(struct CtxResults) - (portNumberSize < 3 ? 4 : 0);

  00235	80 fb 03	 cmp	 bl, 3

; 569  : }

  00238	5f		 pop	 edi
  00239	1b c9		 sbb	 ecx, ecx
  0023b	6b c0 18	 imul	 eax, eax, 24
  0023e	83 e1 04	 and	 ecx, 4
  00241	5e		 pop	 esi
  00242	5b		 pop	 ebx
  00243	2b c1		 sub	 eax, ecx
  00245	83 c0 14	 add	 eax, 20			; 00000014H
  00248	8b e5		 mov	 esp, ebp
  0024a	5d		 pop	 ebp
  0024b	c3		 ret	 0
_rpcBind ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File c:\users\dell\desktop\vlmcsd\src\rpc.c
;	COMDAT _createRpcHeader
_TEXT	SEGMENT
_size$dead$ = 8						; size = 2
_createRpcHeader PROC					; COMDAT
; _header$ = ecx
; _packetType$dead$ = dl

; 598  : 	header->PacketType = packetType;
; 599  : 	header->PacketFlags = RPC_PF_FIRST | RPC_PF_LAST;
; 600  : 	header->VersionMajor = 5;
; 601  : 	header->VersionMinor = 0;
; 602  : 	header->AuthLength = 0;

  00000	33 c0		 xor	 eax, eax
  00002	c7 01 05 00 03
	03		 mov	 DWORD PTR [ecx], 50528261 ; 03030005H

; 603  : 	header->DataRepresentation = BE32(0x10000000); // Little endian, ASCII charset, IEEE floating point
; 604  : 	header->CallId = LE32(CallId);
; 605  : 	header->FragLength = LE16(size);

  00008	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0000b	c7 41 04 10 00
	00 00		 mov	 DWORD PTR [ecx+4], 16	; 00000010H
  00012	c7 41 0c 02 00
	00 00		 mov	 DWORD PTR [ecx+12], 2

; 606  : }

  00019	c3		 ret	 0
_createRpcHeader ENDP
_TEXT	ENDS
END
